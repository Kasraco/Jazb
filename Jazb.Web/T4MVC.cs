// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments and CLS compliance
// 0108: suppress "Foo hides inherited member Foo. Use the new keyword if hiding was intended." when a controller and its abstract parent are both processed
#pragma warning disable 1591, 3008, 3009, 0108
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static partial class MVC
{
    static readonly AdminClass s_Admin = new AdminClass();
    public static AdminClass Admin { get { return s_Admin; } }
    public static Jazb.Web.Controllers.articlesController articles = new Jazb.Web.Controllers.T4MVC_articlesController();
    public static Jazb.Web.Controllers.categoriesController categories = new Jazb.Web.Controllers.T4MVC_categoriesController();
    public static Jazb.Web.Controllers.ContactUsController ContactUs = new Jazb.Web.Controllers.T4MVC_ContactUsController();
    public static Jazb.Web.Controllers.ErrorController Error = new Jazb.Web.Controllers.T4MVC_ErrorController();
    public static Jazb.Web.Controllers.FAQsController FAQs = new Jazb.Web.Controllers.T4MVC_FAQsController();
    public static Jazb.Web.Controllers.ForgottenPasswordController ForgottenPassword = new Jazb.Web.Controllers.T4MVC_ForgottenPasswordController();
    public static Jazb.Web.Controllers.HomeController Home = new Jazb.Web.Controllers.T4MVC_HomeController();
    public static Jazb.Web.Controllers.MailController Mail = new Jazb.Web.Controllers.T4MVC_MailController();
    public static Jazb.Web.Controllers.MetaTagController MetaTag = new Jazb.Web.Controllers.T4MVC_MetaTagController();
    public static Jazb.Web.Controllers.PaymentController Payment = new Jazb.Web.Controllers.T4MVC_PaymentController();
    public static Jazb.Web.Controllers.ResultController Result = new Jazb.Web.Controllers.T4MVC_ResultController();
    public static Jazb.Web.Controllers.SanjeshController Sanjesh = new Jazb.Web.Controllers.T4MVC_SanjeshController();
    public static Jazb.Web.Controllers.TestController Test = new Jazb.Web.Controllers.T4MVC_TestController();
    public static Jazb.Web.Controllers.TreeViewController TreeView = new Jazb.Web.Controllers.T4MVC_TreeViewController();
    public static Jazb.Web.Controllers.UserController User = new Jazb.Web.Controllers.T4MVC_UserController();
    public static Jazb.Web.Controllers.ValentearController Valentear = new Jazb.Web.Controllers.T4MVC_ValentearController();
    public static T4MVC.EmailTemplatesController EmailTemplates = new T4MVC.EmailTemplatesController();
    public static T4MVC.SearchController Search = new T4MVC.SearchController();
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}

namespace T4MVC
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class AdminClass
    {
        public readonly string Name = "Admin";
        public Jazb.Web.Areas.Admin.Controllers.AnswerController Answer = new Jazb.Web.Areas.Admin.Controllers.T4MVC_AnswerController();
        public Jazb.Web.Areas.Admin.Controllers.articlesController articles = new Jazb.Web.Areas.Admin.Controllers.T4MVC_articlesController();
        public Jazb.Web.Areas.Admin.Controllers.AzmoonDegreeController AzmoonDegree = new Jazb.Web.Areas.Admin.Controllers.T4MVC_AzmoonDegreeController();
        public Jazb.Web.Areas.Admin.Controllers.AzmoonJobController AzmoonJob = new Jazb.Web.Areas.Admin.Controllers.T4MVC_AzmoonJobController();
        public Jazb.Web.Areas.Admin.Controllers.AzmoonsController Azmoons = new Jazb.Web.Areas.Admin.Controllers.T4MVC_AzmoonsController();
        public Jazb.Web.Areas.Admin.Controllers.AzmoonSettingController AzmoonSetting = new Jazb.Web.Areas.Admin.Controllers.T4MVC_AzmoonSettingController();
        public Jazb.Web.Areas.Admin.Controllers.categoriesController categories = new Jazb.Web.Areas.Admin.Controllers.T4MVC_categoriesController();
        public Jazb.Web.Areas.Admin.Controllers.ConscriptStatusController ConscriptStatus = new Jazb.Web.Areas.Admin.Controllers.T4MVC_ConscriptStatusController();
        public Jazb.Web.Areas.Admin.Controllers.ContactUsController ContactUs = new Jazb.Web.Areas.Admin.Controllers.T4MVC_ContactUsController();
        public Jazb.Web.Areas.Admin.Controllers.DegreeController Degree = new Jazb.Web.Areas.Admin.Controllers.T4MVC_DegreeController();
        public Jazb.Web.Areas.Admin.Controllers.DevotionTypeController DevotionType = new Jazb.Web.Areas.Admin.Controllers.T4MVC_DevotionTypeController();
        public Jazb.Web.Areas.Admin.Controllers.EducationSkillController EducationSkill = new Jazb.Web.Areas.Admin.Controllers.T4MVC_EducationSkillController();
        public Jazb.Web.Areas.Admin.Controllers.FaithController Faith = new Jazb.Web.Areas.Admin.Controllers.T4MVC_FaithController();
        public Jazb.Web.Areas.Admin.Controllers.FileController File = new Jazb.Web.Areas.Admin.Controllers.T4MVC_FileController();
        public Jazb.Web.Areas.Admin.Controllers.GenderController Gender = new Jazb.Web.Areas.Admin.Controllers.T4MVC_GenderController();
        public Jazb.Web.Areas.Admin.Controllers.HomeController Home = new Jazb.Web.Areas.Admin.Controllers.T4MVC_HomeController();
        public Jazb.Web.Areas.Admin.Controllers.JobController Job = new Jazb.Web.Areas.Admin.Controllers.T4MVC_JobController();
        public Jazb.Web.Areas.Admin.Controllers.MailController Mail = new Jazb.Web.Areas.Admin.Controllers.T4MVC_MailController();
        public Jazb.Web.Areas.Admin.Controllers.ManageAmountCardController ManageAmountCard = new Jazb.Web.Areas.Admin.Controllers.T4MVC_ManageAmountCardController();
        public Jazb.Web.Areas.Admin.Controllers.MarriageStatusController MarriageStatus = new Jazb.Web.Areas.Admin.Controllers.T4MVC_MarriageStatusController();
        public Jazb.Web.Areas.Admin.Controllers.OptionController Option = new Jazb.Web.Areas.Admin.Controllers.T4MVC_OptionController();
        public Jazb.Web.Areas.Admin.Controllers.PlaceController Place = new Jazb.Web.Areas.Admin.Controllers.T4MVC_PlaceController();
        public Jazb.Web.Areas.Admin.Controllers.QoutaTypeController QoutaType = new Jazb.Web.Areas.Admin.Controllers.T4MVC_QoutaTypeController();
        public Jazb.Web.Areas.Admin.Controllers.ReligionController Religion = new Jazb.Web.Areas.Admin.Controllers.T4MVC_ReligionController();
        public Jazb.Web.Areas.Admin.Controllers.UserController User = new Jazb.Web.Areas.Admin.Controllers.T4MVC_UserController();
        public Jazb.Web.Areas.Admin.Controllers.ValeantearreportsController Valeantearreports = new Jazb.Web.Areas.Admin.Controllers.T4MVC_ValeantearreportsController();
        public Jazb.Web.Areas.Admin.Controllers.ValentearController Valentear = new Jazb.Web.Areas.Admin.Controllers.T4MVC_ValentearController();
        public T4MVC.Admin.SharedController Shared = new T4MVC.Admin.SharedController();
    }
}

namespace T4MVC
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class Dummy
    {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal partial class T4MVC_System_Web_Mvc_ViewResult : System.Web.Mvc.ViewResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_ViewResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal partial class T4MVC_System_Web_Mvc_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_ActionResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}



namespace Links
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Scripts {
        private const string URLPATH = "~/Scripts";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string _references_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/_references.min.js") ? Url("_references.min.js") : Url("_references.js");
        public static readonly string adminjs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/adminjs.min.js") ? Url("adminjs.min.js") : Url("adminjs.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class bootstrap {
            private const string URLPATH = "~/Scripts/bootstrap";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string bootstrap_affix_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-affix.min.js") ? Url("bootstrap-affix.min.js") : Url("bootstrap-affix.js");
            public static readonly string bootstrap_rtl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-rtl.min.js") ? Url("bootstrap-rtl.min.js") : Url("bootstrap-rtl.js");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class bootstrap_fileupload {
            private const string URLPATH = "~/Scripts/bootstrap-fileupload";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string bootstrap_fileupload_min_js = Url("bootstrap-fileupload.min.js");
        }
    
        public static readonly string bootstrap_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.js") ? Url("bootstrap.min.js") : Url("bootstrap.js");
        public static readonly string bootstrap_min_js = Url("bootstrap.min.js");
        public static readonly string bootstrap_min_js_map = Url("bootstrap.min.js.map");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class chosen {
            private const string URLPATH = "~/Scripts/chosen";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string ajax_chosen_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ajax-chosen.min.js") ? Url("ajax-chosen.min.js") : Url("ajax-chosen.js");
            public static readonly string chosen_sprite_png = Url("chosen-sprite.png");
            public static readonly string chosen_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/chosen.min.css") ? Url("chosen.min.css") : Url("chosen.css");
                 
            public static readonly string chosen_jquery_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/chosen.jquery.min.js") ? Url("chosen.jquery.min.js") : Url("chosen.jquery.js");
            public static readonly string chosen_jquery_min_js = Url("chosen.jquery.min.js");
            public static readonly string chosen_jquery_min_js_map = Url("chosen.jquery.min.js.map");
            public static readonly string chosen_proto_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/chosen.proto.min.js") ? Url("chosen.proto.min.js") : Url("chosen.proto.js");
            public static readonly string chosen_proto_min_js = Url("chosen.proto.min.js");
            public static readonly string chosen_proto_min_js_map = Url("chosen.proto.min.js.map");
            public static readonly string Copy_of_chosen_jquery_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Copy of chosen.jquery.min.js") ? Url("Copy of chosen.jquery.min.js") : Url("Copy of chosen.jquery.js");
            public static readonly string Copy_of_chosen_jquery_min_js_map = Url("Copy of chosen.jquery.min.js.map");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class ckeditor {
            private const string URLPATH = "~/Scripts/ckeditor";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string build_config_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/build-config.min.js") ? Url("build-config.min.js") : Url("build-config.js");
            public static readonly string CHANGES_md = Url("CHANGES.md");
            public static readonly string ckeditor_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ckeditor.min.js") ? Url("ckeditor.min.js") : Url("ckeditor.js");
            public static readonly string config_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/config.min.js") ? Url("config.min.js") : Url("config.js");
            public static readonly string contents_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/contents.min.css") ? Url("contents.min.css") : Url("contents.css");
                 
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class lang {
                private const string URLPATH = "~/Scripts/ckeditor/lang";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string af_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/af.min.js") ? Url("af.min.js") : Url("af.js");
                public static readonly string ar_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ar.min.js") ? Url("ar.min.js") : Url("ar.js");
                public static readonly string bg_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bg.min.js") ? Url("bg.min.js") : Url("bg.js");
                public static readonly string bn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bn.min.js") ? Url("bn.min.js") : Url("bn.js");
                public static readonly string bs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bs.min.js") ? Url("bs.min.js") : Url("bs.js");
                public static readonly string ca_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ca.min.js") ? Url("ca.min.js") : Url("ca.js");
                public static readonly string cs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/cs.min.js") ? Url("cs.min.js") : Url("cs.js");
                public static readonly string cy_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/cy.min.js") ? Url("cy.min.js") : Url("cy.js");
                public static readonly string da_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/da.min.js") ? Url("da.min.js") : Url("da.js");
                public static readonly string de_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/de.min.js") ? Url("de.min.js") : Url("de.js");
                public static readonly string el_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/el.min.js") ? Url("el.min.js") : Url("el.js");
                public static readonly string en_au_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en-au.min.js") ? Url("en-au.min.js") : Url("en-au.js");
                public static readonly string en_ca_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en-ca.min.js") ? Url("en-ca.min.js") : Url("en-ca.js");
                public static readonly string en_gb_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en-gb.min.js") ? Url("en-gb.min.js") : Url("en-gb.js");
                public static readonly string en_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en.min.js") ? Url("en.min.js") : Url("en.js");
                public static readonly string eo_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/eo.min.js") ? Url("eo.min.js") : Url("eo.js");
                public static readonly string es_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/es.min.js") ? Url("es.min.js") : Url("es.js");
                public static readonly string et_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/et.min.js") ? Url("et.min.js") : Url("et.js");
                public static readonly string eu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/eu.min.js") ? Url("eu.min.js") : Url("eu.js");
                public static readonly string fa_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fa.min.js") ? Url("fa.min.js") : Url("fa.js");
                public static readonly string fi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fi.min.js") ? Url("fi.min.js") : Url("fi.js");
                public static readonly string fo_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fo.min.js") ? Url("fo.min.js") : Url("fo.js");
                public static readonly string fr_ca_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fr-ca.min.js") ? Url("fr-ca.min.js") : Url("fr-ca.js");
                public static readonly string fr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fr.min.js") ? Url("fr.min.js") : Url("fr.js");
                public static readonly string gl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/gl.min.js") ? Url("gl.min.js") : Url("gl.js");
                public static readonly string gu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/gu.min.js") ? Url("gu.min.js") : Url("gu.js");
                public static readonly string he_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/he.min.js") ? Url("he.min.js") : Url("he.js");
                public static readonly string hi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hi.min.js") ? Url("hi.min.js") : Url("hi.js");
                public static readonly string hr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hr.min.js") ? Url("hr.min.js") : Url("hr.js");
                public static readonly string hu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hu.min.js") ? Url("hu.min.js") : Url("hu.js");
                public static readonly string is_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/is.min.js") ? Url("is.min.js") : Url("is.js");
                public static readonly string it_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/it.min.js") ? Url("it.min.js") : Url("it.js");
                public static readonly string ja_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ja.min.js") ? Url("ja.min.js") : Url("ja.js");
                public static readonly string ka_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ka.min.js") ? Url("ka.min.js") : Url("ka.js");
                public static readonly string km_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/km.min.js") ? Url("km.min.js") : Url("km.js");
                public static readonly string ko_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ko.min.js") ? Url("ko.min.js") : Url("ko.js");
                public static readonly string ku_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ku.min.js") ? Url("ku.min.js") : Url("ku.js");
                public static readonly string lt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lt.min.js") ? Url("lt.min.js") : Url("lt.js");
                public static readonly string lv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lv.min.js") ? Url("lv.min.js") : Url("lv.js");
                public static readonly string mk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mk.min.js") ? Url("mk.min.js") : Url("mk.js");
                public static readonly string mn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mn.min.js") ? Url("mn.min.js") : Url("mn.js");
                public static readonly string ms_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ms.min.js") ? Url("ms.min.js") : Url("ms.js");
                public static readonly string nb_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nb.min.js") ? Url("nb.min.js") : Url("nb.js");
                public static readonly string nl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nl.min.js") ? Url("nl.min.js") : Url("nl.js");
                public static readonly string no_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/no.min.js") ? Url("no.min.js") : Url("no.js");
                public static readonly string pl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pl.min.js") ? Url("pl.min.js") : Url("pl.js");
                public static readonly string pt_br_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pt-br.min.js") ? Url("pt-br.min.js") : Url("pt-br.js");
                public static readonly string pt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pt.min.js") ? Url("pt.min.js") : Url("pt.js");
                public static readonly string ro_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ro.min.js") ? Url("ro.min.js") : Url("ro.js");
                public static readonly string ru_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ru.min.js") ? Url("ru.min.js") : Url("ru.js");
                public static readonly string sk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sk.min.js") ? Url("sk.min.js") : Url("sk.js");
                public static readonly string sl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sl.min.js") ? Url("sl.min.js") : Url("sl.js");
                public static readonly string sr_latn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sr-latn.min.js") ? Url("sr-latn.min.js") : Url("sr-latn.js");
                public static readonly string sr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sr.min.js") ? Url("sr.min.js") : Url("sr.js");
                public static readonly string sv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sv.min.js") ? Url("sv.min.js") : Url("sv.js");
                public static readonly string th_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/th.min.js") ? Url("th.min.js") : Url("th.js");
                public static readonly string tr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tr.min.js") ? Url("tr.min.js") : Url("tr.js");
                public static readonly string ug_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ug.min.js") ? Url("ug.min.js") : Url("ug.js");
                public static readonly string uk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/uk.min.js") ? Url("uk.min.js") : Url("uk.js");
                public static readonly string vi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/vi.min.js") ? Url("vi.min.js") : Url("vi.js");
                public static readonly string zh_cn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/zh-cn.min.js") ? Url("zh-cn.min.js") : Url("zh-cn.js");
                public static readonly string zh_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/zh.min.js") ? Url("zh.min.js") : Url("zh.js");
            }
        
            public static readonly string LICENSE_md = Url("LICENSE.md");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class plugins {
                private const string URLPATH = "~/Scripts/ckeditor/plugins";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class a11yhelp {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/a11yhelp";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class dialogs {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string a11yhelp_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/a11yhelp.min.js") ? Url("a11yhelp.min.js") : Url("a11yhelp.js");
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class lang {
                            private const string URLPATH = "~/Scripts/ckeditor/plugins/a11yhelp/dialogs/lang";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string _translationstatus_txt = Url("_translationstatus.txt");
                            public static readonly string ar_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ar.min.js") ? Url("ar.min.js") : Url("ar.js");
                            public static readonly string bg_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bg.min.js") ? Url("bg.min.js") : Url("bg.js");
                            public static readonly string ca_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ca.min.js") ? Url("ca.min.js") : Url("ca.js");
                            public static readonly string cs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/cs.min.js") ? Url("cs.min.js") : Url("cs.js");
                            public static readonly string cy_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/cy.min.js") ? Url("cy.min.js") : Url("cy.js");
                            public static readonly string da_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/da.min.js") ? Url("da.min.js") : Url("da.js");
                            public static readonly string de_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/de.min.js") ? Url("de.min.js") : Url("de.js");
                            public static readonly string el_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/el.min.js") ? Url("el.min.js") : Url("el.js");
                            public static readonly string en_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en.min.js") ? Url("en.min.js") : Url("en.js");
                            public static readonly string eo_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/eo.min.js") ? Url("eo.min.js") : Url("eo.js");
                            public static readonly string et_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/et.min.js") ? Url("et.min.js") : Url("et.js");
                            public static readonly string fa_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fa.min.js") ? Url("fa.min.js") : Url("fa.js");
                            public static readonly string fi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fi.min.js") ? Url("fi.min.js") : Url("fi.js");
                            public static readonly string fr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fr.min.js") ? Url("fr.min.js") : Url("fr.js");
                            public static readonly string gu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/gu.min.js") ? Url("gu.min.js") : Url("gu.js");
                            public static readonly string he_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/he.min.js") ? Url("he.min.js") : Url("he.js");
                            public static readonly string hi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hi.min.js") ? Url("hi.min.js") : Url("hi.js");
                            public static readonly string hr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hr.min.js") ? Url("hr.min.js") : Url("hr.js");
                            public static readonly string hu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hu.min.js") ? Url("hu.min.js") : Url("hu.js");
                            public static readonly string it_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/it.min.js") ? Url("it.min.js") : Url("it.js");
                            public static readonly string ku_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ku.min.js") ? Url("ku.min.js") : Url("ku.js");
                            public static readonly string lt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lt.min.js") ? Url("lt.min.js") : Url("lt.js");
                            public static readonly string lv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lv.min.js") ? Url("lv.min.js") : Url("lv.js");
                            public static readonly string mk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mk.min.js") ? Url("mk.min.js") : Url("mk.js");
                            public static readonly string mn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mn.min.js") ? Url("mn.min.js") : Url("mn.js");
                            public static readonly string nb_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nb.min.js") ? Url("nb.min.js") : Url("nb.js");
                            public static readonly string nl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nl.min.js") ? Url("nl.min.js") : Url("nl.js");
                            public static readonly string no_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/no.min.js") ? Url("no.min.js") : Url("no.js");
                            public static readonly string pl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pl.min.js") ? Url("pl.min.js") : Url("pl.js");
                            public static readonly string pt_br_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pt-br.min.js") ? Url("pt-br.min.js") : Url("pt-br.js");
                            public static readonly string pt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pt.min.js") ? Url("pt.min.js") : Url("pt.js");
                            public static readonly string ro_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ro.min.js") ? Url("ro.min.js") : Url("ro.js");
                            public static readonly string ru_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ru.min.js") ? Url("ru.min.js") : Url("ru.js");
                            public static readonly string sk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sk.min.js") ? Url("sk.min.js") : Url("sk.js");
                            public static readonly string sl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sl.min.js") ? Url("sl.min.js") : Url("sl.js");
                            public static readonly string tr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tr.min.js") ? Url("tr.min.js") : Url("tr.js");
                            public static readonly string ug_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ug.min.js") ? Url("ug.min.js") : Url("ug.js");
                            public static readonly string uk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/uk.min.js") ? Url("uk.min.js") : Url("uk.js");
                            public static readonly string vi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/vi.min.js") ? Url("vi.min.js") : Url("vi.js");
                            public static readonly string zh_cn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/zh-cn.min.js") ? Url("zh-cn.min.js") : Url("zh-cn.js");
                        }
                    
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class about {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/about";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class dialogs {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/about/dialogs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string about_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/about.min.js") ? Url("about.min.js") : Url("about.js");
                        public static readonly string logo_ckeditor_png = Url("logo_ckeditor.png");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class clipboard {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/clipboard";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class dialogs {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/clipboard/dialogs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string paste_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/paste.min.js") ? Url("paste.min.js") : Url("paste.js");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class colordialog {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/colordialog";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class dialogs {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/colordialog/dialogs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string colordialog_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/colordialog.min.js") ? Url("colordialog.min.js") : Url("colordialog.js");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class dialog {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/dialog";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string dialogDefinition_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialogDefinition.min.js") ? Url("dialogDefinition.min.js") : Url("dialogDefinition.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class div {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/div";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class dialogs {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/div/dialogs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string div_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/div.min.js") ? Url("div.min.js") : Url("div.js");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class fakeobjects {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/fakeobjects";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class images {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/fakeobjects/images";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string spacer_gif = Url("spacer.gif");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class find {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/find";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class dialogs {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/find/dialogs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string find_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/find.min.js") ? Url("find.min.js") : Url("find.js");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class flash {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/flash";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class dialogs {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/flash/dialogs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string flash_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/flash.min.js") ? Url("flash.min.js") : Url("flash.js");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class images {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/flash/images";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string placeholder_png = Url("placeholder.png");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class forms {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/forms";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class dialogs {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/forms/dialogs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string button_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/button.min.js") ? Url("button.min.js") : Url("button.js");
                        public static readonly string checkbox_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/checkbox.min.js") ? Url("checkbox.min.js") : Url("checkbox.js");
                        public static readonly string form_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/form.min.js") ? Url("form.min.js") : Url("form.js");
                        public static readonly string hiddenfield_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hiddenfield.min.js") ? Url("hiddenfield.min.js") : Url("hiddenfield.js");
                        public static readonly string radio_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/radio.min.js") ? Url("radio.min.js") : Url("radio.js");
                        public static readonly string select_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/select.min.js") ? Url("select.min.js") : Url("select.js");
                        public static readonly string textarea_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/textarea.min.js") ? Url("textarea.min.js") : Url("textarea.js");
                        public static readonly string textfield_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/textfield.min.js") ? Url("textfield.min.js") : Url("textfield.js");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class images {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/forms/images";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string hiddenfield_gif = Url("hiddenfield.gif");
                    }
                
                }
            
                public static readonly string icons_png = Url("icons.png");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class iframe {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/iframe";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class dialogs {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/iframe/dialogs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string iframe_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/iframe.min.js") ? Url("iframe.min.js") : Url("iframe.js");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class images {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/iframe/images";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string placeholder_png = Url("placeholder.png");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class image {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/image";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class dialogs {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/image/dialogs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string image_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/image.min.js") ? Url("image.min.js") : Url("image.js");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class images {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/image/images";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string noimage_png = Url("noimage.png");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class link {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/link";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class dialogs {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/link/dialogs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string anchor_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/anchor.min.js") ? Url("anchor.min.js") : Url("anchor.js");
                        public static readonly string link_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/link.min.js") ? Url("link.min.js") : Url("link.js");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class images {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/link/images";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string anchor_png = Url("anchor.png");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class liststyle {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/liststyle";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class dialogs {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/liststyle/dialogs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string liststyle_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/liststyle.min.js") ? Url("liststyle.min.js") : Url("liststyle.js");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class magicline {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/magicline";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class images {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/magicline/images";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string icon_png = Url("icon.png");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class pagebreak {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/pagebreak";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class images {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/pagebreak/images";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string pagebreak_gif = Url("pagebreak.gif");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class pastefromword {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/pastefromword";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class filter {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/pastefromword/filter";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string default_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/default.min.js") ? Url("default.min.js") : Url("default.js");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class preview {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/preview";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string preview_html = Url("preview.html");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class showblocks {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/showblocks";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class images {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/showblocks/images";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string block_address_png = Url("block_address.png");
                        public static readonly string block_blockquote_png = Url("block_blockquote.png");
                        public static readonly string block_div_png = Url("block_div.png");
                        public static readonly string block_h1_png = Url("block_h1.png");
                        public static readonly string block_h2_png = Url("block_h2.png");
                        public static readonly string block_h3_png = Url("block_h3.png");
                        public static readonly string block_h4_png = Url("block_h4.png");
                        public static readonly string block_h5_png = Url("block_h5.png");
                        public static readonly string block_h6_png = Url("block_h6.png");
                        public static readonly string block_p_png = Url("block_p.png");
                        public static readonly string block_pre_png = Url("block_pre.png");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class smiley {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/smiley";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class dialogs {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/smiley/dialogs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string smiley_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/smiley.min.js") ? Url("smiley.min.js") : Url("smiley.js");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class images {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/smiley/images";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string angel_smile_gif = Url("angel_smile.gif");
                        public static readonly string angry_smile_gif = Url("angry_smile.gif");
                        public static readonly string broken_heart_gif = Url("broken_heart.gif");
                        public static readonly string confused_smile_gif = Url("confused_smile.gif");
                        public static readonly string cry_smile_gif = Url("cry_smile.gif");
                        public static readonly string devil_smile_gif = Url("devil_smile.gif");
                        public static readonly string embaressed_smile_gif = Url("embaressed_smile.gif");
                        public static readonly string embarrassed_smile_gif = Url("embarrassed_smile.gif");
                        public static readonly string envelope_gif = Url("envelope.gif");
                        public static readonly string heart_gif = Url("heart.gif");
                        public static readonly string kiss_gif = Url("kiss.gif");
                        public static readonly string lightbulb_gif = Url("lightbulb.gif");
                        public static readonly string omg_smile_gif = Url("omg_smile.gif");
                        public static readonly string regular_smile_gif = Url("regular_smile.gif");
                        public static readonly string sad_smile_gif = Url("sad_smile.gif");
                        public static readonly string shades_smile_gif = Url("shades_smile.gif");
                        public static readonly string teeth_smile_gif = Url("teeth_smile.gif");
                        public static readonly string thumbs_down_gif = Url("thumbs_down.gif");
                        public static readonly string thumbs_up_gif = Url("thumbs_up.gif");
                        public static readonly string tongue_smile_gif = Url("tongue_smile.gif");
                        public static readonly string tounge_smile_gif = Url("tounge_smile.gif");
                        public static readonly string whatchutalkingabout_smile_gif = Url("whatchutalkingabout_smile.gif");
                        public static readonly string wink_smile_gif = Url("wink_smile.gif");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class specialchar {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/specialchar";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class dialogs {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/specialchar/dialogs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class lang {
                            private const string URLPATH = "~/Scripts/ckeditor/plugins/specialchar/dialogs/lang";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string _translationstatus_txt = Url("_translationstatus.txt");
                            public static readonly string ca_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ca.min.js") ? Url("ca.min.js") : Url("ca.js");
                            public static readonly string cs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/cs.min.js") ? Url("cs.min.js") : Url("cs.js");
                            public static readonly string cy_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/cy.min.js") ? Url("cy.min.js") : Url("cy.js");
                            public static readonly string de_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/de.min.js") ? Url("de.min.js") : Url("de.js");
                            public static readonly string el_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/el.min.js") ? Url("el.min.js") : Url("el.js");
                            public static readonly string en_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en.min.js") ? Url("en.min.js") : Url("en.js");
                            public static readonly string eo_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/eo.min.js") ? Url("eo.min.js") : Url("eo.js");
                            public static readonly string et_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/et.min.js") ? Url("et.min.js") : Url("et.js");
                            public static readonly string fa_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fa.min.js") ? Url("fa.min.js") : Url("fa.js");
                            public static readonly string fi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fi.min.js") ? Url("fi.min.js") : Url("fi.js");
                            public static readonly string fr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fr.min.js") ? Url("fr.min.js") : Url("fr.js");
                            public static readonly string he_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/he.min.js") ? Url("he.min.js") : Url("he.js");
                            public static readonly string hr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hr.min.js") ? Url("hr.min.js") : Url("hr.js");
                            public static readonly string it_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/it.min.js") ? Url("it.min.js") : Url("it.js");
                            public static readonly string ku_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ku.min.js") ? Url("ku.min.js") : Url("ku.js");
                            public static readonly string lv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lv.min.js") ? Url("lv.min.js") : Url("lv.js");
                            public static readonly string nb_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nb.min.js") ? Url("nb.min.js") : Url("nb.js");
                            public static readonly string nl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nl.min.js") ? Url("nl.min.js") : Url("nl.js");
                            public static readonly string no_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/no.min.js") ? Url("no.min.js") : Url("no.js");
                            public static readonly string pt_br_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pt-br.min.js") ? Url("pt-br.min.js") : Url("pt-br.js");
                            public static readonly string sk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sk.min.js") ? Url("sk.min.js") : Url("sk.js");
                            public static readonly string tr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tr.min.js") ? Url("tr.min.js") : Url("tr.js");
                            public static readonly string ug_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ug.min.js") ? Url("ug.min.js") : Url("ug.js");
                            public static readonly string zh_cn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/zh-cn.min.js") ? Url("zh-cn.min.js") : Url("zh-cn.js");
                        }
                    
                        public static readonly string specialchar_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/specialchar.min.js") ? Url("specialchar.min.js") : Url("specialchar.js");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class table {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/table";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class dialogs {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/table/dialogs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string table_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/table.min.js") ? Url("table.min.js") : Url("table.js");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class tabletools {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/tabletools";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class dialogs {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/tabletools/dialogs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string tableCell_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tableCell.min.js") ? Url("tableCell.min.js") : Url("tableCell.js");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class templates {
                    private const string URLPATH = "~/Scripts/ckeditor/plugins/templates";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class dialogs {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/templates/dialogs";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string templates_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/templates.min.css") ? Url("templates.min.css") : Url("templates.css");
                             
                        public static readonly string templates_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/templates.min.js") ? Url("templates.min.js") : Url("templates.js");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class templates_ {
                        private const string URLPATH = "~/Scripts/ckeditor/plugins/templates/templates";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string default_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/default.min.js") ? Url("default.min.js") : Url("default.js");
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class images {
                            private const string URLPATH = "~/Scripts/ckeditor/plugins/templates/templates/images";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string template1_gif = Url("template1.gif");
                            public static readonly string template2_gif = Url("template2.gif");
                            public static readonly string template3_gif = Url("template3.gif");
                        }
                    
                    }
                
                }
            
            }
        
            public static readonly string README_md = Url("README.md");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class samples {
                private const string URLPATH = "~/Scripts/ckeditor/samples";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string ajax_html = Url("ajax.html");
                public static readonly string api_html = Url("api.html");
                public static readonly string appendto_html = Url("appendto.html");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class assets {
                    private const string URLPATH = "~/Scripts/ckeditor/samples/assets";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class inlineall {
                        private const string URLPATH = "~/Scripts/ckeditor/samples/assets/inlineall";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string logo_png = Url("logo.png");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class outputxhtml {
                        private const string URLPATH = "~/Scripts/ckeditor/samples/assets/outputxhtml";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string outputxhtml_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/outputxhtml.min.css") ? Url("outputxhtml.min.css") : Url("outputxhtml.css");
                             
                    }
                
                    public static readonly string posteddata_php = Url("posteddata.php");
                    public static readonly string sample_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sample.min.css") ? Url("sample.min.css") : Url("sample.css");
                         
                    public static readonly string sample_jpg = Url("sample.jpg");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class uilanguages {
                        private const string URLPATH = "~/Scripts/ckeditor/samples/assets/uilanguages";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string languages_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/languages.min.js") ? Url("languages.min.js") : Url("languages.js");
                    }
                
                }
            
                public static readonly string divreplace_html = Url("divreplace.html");
                public static readonly string index_html = Url("index.html");
                public static readonly string inlineall_html = Url("inlineall.html");
                public static readonly string inlinebycode_html = Url("inlinebycode.html");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class plugins {
                    private const string URLPATH = "~/Scripts/ckeditor/samples/plugins";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class dialog {
                        private const string URLPATH = "~/Scripts/ckeditor/samples/plugins/dialog";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class assets {
                            private const string URLPATH = "~/Scripts/ckeditor/samples/plugins/dialog/assets";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string my_dialog_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/my_dialog.min.js") ? Url("my_dialog.min.js") : Url("my_dialog.js");
                        }
                    
                        public static readonly string dialog_html = Url("dialog.html");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class enterkey {
                        private const string URLPATH = "~/Scripts/ckeditor/samples/plugins/enterkey";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string enterkey_html = Url("enterkey.html");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class htmlwriter {
                        private const string URLPATH = "~/Scripts/ckeditor/samples/plugins/htmlwriter";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class assets {
                            private const string URLPATH = "~/Scripts/ckeditor/samples/plugins/htmlwriter/assets";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class outputforflash {
                                private const string URLPATH = "~/Scripts/ckeditor/samples/plugins/htmlwriter/assets/outputforflash";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string outputforflash_fla = Url("outputforflash.fla");
                                public static readonly string outputforflash_swf = Url("outputforflash.swf");
                                public static readonly string swfobject_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/swfobject.min.js") ? Url("swfobject.min.js") : Url("swfobject.js");
                            }
                        
                        }
                    
                        public static readonly string outputforflash_html = Url("outputforflash.html");
                        public static readonly string outputhtml_html = Url("outputhtml.html");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class magicline {
                        private const string URLPATH = "~/Scripts/ckeditor/samples/plugins/magicline";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string magicline_html = Url("magicline.html");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class toolbar {
                        private const string URLPATH = "~/Scripts/ckeditor/samples/plugins/toolbar";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string toolbar_html = Url("toolbar.html");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class wysiwygarea {
                        private const string URLPATH = "~/Scripts/ckeditor/samples/plugins/wysiwygarea";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string fullpage_html = Url("fullpage.html");
                    }
                
                }
            
                public static readonly string readonly_html = Url("readonly.html");
                public static readonly string replacebyclass_html = Url("replacebyclass.html");
                public static readonly string replacebycode_html = Url("replacebycode.html");
                public static readonly string sample_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sample.min.css") ? Url("sample.min.css") : Url("sample.css");
                     
                public static readonly string sample_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sample.min.js") ? Url("sample.min.js") : Url("sample.js");
                public static readonly string sample_posteddata_php = Url("sample_posteddata.php");
                public static readonly string tabindex_html = Url("tabindex.html");
                public static readonly string uicolor_html = Url("uicolor.html");
                public static readonly string uilanguages_html = Url("uilanguages.html");
                public static readonly string xhtmlstyle_html = Url("xhtmlstyle.html");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class skins {
                private const string URLPATH = "~/Scripts/ckeditor/skins";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class moono {
                    private const string URLPATH = "~/Scripts/ckeditor/skins/moono";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string dialog_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog.min.css") ? Url("dialog.min.css") : Url("dialog.css");
                         
                    public static readonly string dialog_ie_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog_ie.min.css") ? Url("dialog_ie.min.css") : Url("dialog_ie.css");
                         
                    public static readonly string dialog_ie7_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog_ie7.min.css") ? Url("dialog_ie7.min.css") : Url("dialog_ie7.css");
                         
                    public static readonly string dialog_ie8_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog_ie8.min.css") ? Url("dialog_ie8.min.css") : Url("dialog_ie8.css");
                         
                    public static readonly string dialog_opera_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog_opera.min.css") ? Url("dialog_opera.min.css") : Url("dialog_opera.css");
                         
                    public static readonly string editor_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor.min.css") ? Url("editor.min.css") : Url("editor.css");
                         
                    public static readonly string editor_gecko_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_gecko.min.css") ? Url("editor_gecko.min.css") : Url("editor_gecko.css");
                         
                    public static readonly string editor_ie_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_ie.min.css") ? Url("editor_ie.min.css") : Url("editor_ie.css");
                         
                    public static readonly string editor_ie7_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_ie7.min.css") ? Url("editor_ie7.min.css") : Url("editor_ie7.css");
                         
                    public static readonly string editor_ie8_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_ie8.min.css") ? Url("editor_ie8.min.css") : Url("editor_ie8.css");
                         
                    public static readonly string icons_png = Url("icons.png");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class images {
                        private const string URLPATH = "~/Scripts/ckeditor/skins/moono/images";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string arrow_png = Url("arrow.png");
                        public static readonly string close_png = Url("close.png");
                        public static readonly string mini_png = Url("mini.png");
                    }
                
                    public static readonly string readme_md = Url("readme.md");
                }
            
            }
        
            public static readonly string styles_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/styles.min.js") ? Url("styles.min.js") : Url("styles.js");
        }
    
        public static readonly string holder_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/holder.min.js") ? Url("holder.min.js") : Url("holder.js");
        public static readonly string holder_min_js = Url("holder.min.js");
        public static readonly string jquery_1_9_1_intellisense_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.9.1.intellisense.min.js") ? Url("jquery-1.9.1.intellisense.min.js") : Url("jquery-1.9.1.intellisense.js");
        public static readonly string jquery_1_9_1_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.9.1.min.js") ? Url("jquery-1.9.1.min.js") : Url("jquery-1.9.1.js");
        public static readonly string jquery_1_9_1_min_js = Url("jquery-1.9.1.min.js");
        public static readonly string jquery_1_9_1_min_map = Url("jquery-1.9.1.min.map");
        public static readonly string jquery_migrate_1_1_1_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-migrate-1.1.1.min.js") ? Url("jquery-migrate-1.1.1.min.js") : Url("jquery-migrate-1.1.1.js");
        public static readonly string jquery_ui_1_10_2_autocomplete_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-ui-1.10.2.autocomplete.min.js") ? Url("jquery-ui-1.10.2.autocomplete.min.js") : Url("jquery-ui-1.10.2.autocomplete.js");
        public static readonly string jquery_ui_1_10_2_autocomplete_min_js = Url("jquery-ui-1.10.2.autocomplete.min.js");
        public static readonly string jquery_ui_1_10_4_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-ui-1.10.4.min.js") ? Url("jquery-ui-1.10.4.min.js") : Url("jquery-ui-1.10.4.js");
        public static readonly string jquery_ui_1_10_4_min_js = Url("jquery-ui-1.10.4.min.js");
        public static readonly string jquery_ui_1_8_24_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-ui-1.8.24.min.js") ? Url("jquery-ui-1.8.24.min.js") : Url("jquery-ui-1.8.24.js");
        public static readonly string jquery_ui_1_8_24_min_js = Url("jquery-ui-1.8.24.min.js");
        public static readonly string jquery_validator_combined_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-validator-combined.min.js") ? Url("jquery-validator-combined.min.js") : Url("jquery-validator-combined.js");
        public static readonly string jquery_form_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.form.min.js") ? Url("jquery.form.min.js") : Url("jquery.form.js");
        public static readonly string jquery_unobtrusive_ajax_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.unobtrusive-ajax.min.js") ? Url("jquery.unobtrusive-ajax.min.js") : Url("jquery.unobtrusive-ajax.js");
        public static readonly string jquery_unobtrusive_ajax_min_js = Url("jquery.unobtrusive-ajax.min.js");
        public static readonly string jquery_validate_vsdoc_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate-vsdoc.min.js") ? Url("jquery.validate-vsdoc.min.js") : Url("jquery.validate-vsdoc.js");
        public static readonly string jquery_validate_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.min.js") ? Url("jquery.validate.min.js") : Url("jquery.validate.js");
        public static readonly string jquery_validate_min_js = Url("jquery.validate.min.js");
        public static readonly string jquery_validate_unobtrusive_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.validate.unobtrusive.min.js") ? Url("jquery.validate.unobtrusive.min.js") : Url("jquery.validate.unobtrusive.js");
        public static readonly string jquery_validate_unobtrusive_min_js = Url("jquery.validate.unobtrusive.min.js");
        public static readonly string knockout_2_2_0_debug_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/knockout-2.2.0.debug.min.js") ? Url("knockout-2.2.0.debug.min.js") : Url("knockout-2.2.0.debug.js");
        public static readonly string knockout_2_2_0_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/knockout-2.2.0.min.js") ? Url("knockout-2.2.0.min.js") : Url("knockout-2.2.0.js");
        public static readonly string load_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/load.min.js") ? Url("load.min.js") : Url("load.js");
        public static readonly string modernizr_2_6_2_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/modernizr-2.6.2.min.js") ? Url("modernizr-2.6.2.min.js") : Url("modernizr-2.6.2.js");
        public static readonly string myScript_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/myScript.min.js") ? Url("myScript.min.js") : Url("myScript.js");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class noty {
            private const string URLPATH = "~/Scripts/noty";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string jquery_noty_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.noty.min.js") ? Url("jquery.noty.min.js") : Url("jquery.noty.js");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class layouts {
                private const string URLPATH = "~/Scripts/noty/layouts";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string bottom_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bottom.min.js") ? Url("bottom.min.js") : Url("bottom.js");
                public static readonly string bottomCenter_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bottomCenter.min.js") ? Url("bottomCenter.min.js") : Url("bottomCenter.js");
                public static readonly string bottomLeft_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bottomLeft.min.js") ? Url("bottomLeft.min.js") : Url("bottomLeft.js");
                public static readonly string bottomRight_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bottomRight.min.js") ? Url("bottomRight.min.js") : Url("bottomRight.js");
                public static readonly string center_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/center.min.js") ? Url("center.min.js") : Url("center.js");
                public static readonly string centerLeft_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/centerLeft.min.js") ? Url("centerLeft.min.js") : Url("centerLeft.js");
                public static readonly string centerRight_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/centerRight.min.js") ? Url("centerRight.min.js") : Url("centerRight.js");
                public static readonly string inline_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/inline.min.js") ? Url("inline.min.js") : Url("inline.js");
                public static readonly string top_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/top.min.js") ? Url("top.min.js") : Url("top.js");
                public static readonly string topCenter_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/topCenter.min.js") ? Url("topCenter.min.js") : Url("topCenter.js");
                public static readonly string topLeft_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/topLeft.min.js") ? Url("topLeft.min.js") : Url("topLeft.js");
                public static readonly string topRight_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/topRight.min.js") ? Url("topRight.min.js") : Url("topRight.js");
            }
        
            public static readonly string promise_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/promise.min.js") ? Url("promise.min.js") : Url("promise.js");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class themes {
                private const string URLPATH = "~/Scripts/noty/themes";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string default_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/default.min.js") ? Url("default.min.js") : Url("default.js");
            }
        
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class PersianCalender {
            private const string URLPATH = "~/Scripts/PersianCalender";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string calendar_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/calendar.min.js") ? Url("calendar.min.js") : Url("calendar.js");
            public static readonly string jquery_ui_datepicker_cc_fa_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.datepicker-cc-fa.min.js") ? Url("jquery.ui.datepicker-cc-fa.min.js") : Url("jquery.ui.datepicker-cc-fa.js");
            public static readonly string jquery_ui_datepicker_cc_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.datepicker-cc.min.js") ? Url("jquery.ui.datepicker-cc.min.js") : Url("jquery.ui.datepicker-cc.js");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class redactor {
            private const string URLPATH = "~/Scripts/redactor";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string fa_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fa.min.js") ? Url("fa.min.js") : Url("fa.js");
            public static readonly string redactor_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/redactor.min.css") ? Url("redactor.min.css") : Url("redactor.css");
                 
            public static readonly string redactor_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/redactor.min.js") ? Url("redactor.min.js") : Url("redactor.js");
            public static readonly string redactor_min_js = Url("redactor.min.js");
            public static readonly string redactor_min_js_map = Url("redactor.min.js.map");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class Select2 {
            private const string URLPATH = "~/Scripts/Select2";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string select2_min_js = Url("select2.min.js");
        }
    
        public static readonly string toastr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/toastr.min.js") ? Url("toastr.min.js") : Url("toastr.js");
        public static readonly string toastr_min_js = Url("toastr.min.js");
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Content {
        private const string URLPATH = "~/Content";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string Absent_mrt = Url("Absent.mrt");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class Admin {
            private const string URLPATH = "~/Content/Admin";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class bootstrap {
                private const string URLPATH = "~/Content/Admin/bootstrap";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class css {
                    private const string URLPATH = "~/Content/Admin/bootstrap/css";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string bootstrap_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.css") ? Url("bootstrap.min.css") : Url("bootstrap.css");
                         
                    public static readonly string bootstrap_css_map = Url("bootstrap.css.map");
                    public static readonly string bootstrap_min_css = Url("bootstrap.min.css");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class fonts {
                    private const string URLPATH = "~/Content/Admin/bootstrap/fonts";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string glyphicons_halflings_regular_eot = Url("glyphicons-halflings-regular.eot");
                    public static readonly string glyphicons_halflings_regular_svg = Url("glyphicons-halflings-regular.svg");
                    public static readonly string glyphicons_halflings_regular_ttf = Url("glyphicons-halflings-regular.ttf");
                    public static readonly string glyphicons_halflings_regular_woff = Url("glyphicons-halflings-regular.woff");
                    public static readonly string glyphicons_halflings_regular_woff2 = Url("glyphicons-halflings-regular.woff2");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class js {
                    private const string URLPATH = "~/Content/Admin/bootstrap/js";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string bootstrap_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.js") ? Url("bootstrap.min.js") : Url("bootstrap.js");
                    public static readonly string bootstrap_min_js = Url("bootstrap.min.js");
                    public static readonly string npm_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/npm.min.js") ? Url("npm.min.js") : Url("npm.js");
                }
            
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class dist {
                private const string URLPATH = "~/Content/Admin/dist";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class css {
                    private const string URLPATH = "~/Content/Admin/dist/css";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string AdminLTE_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/AdminLTE.min.css") ? Url("AdminLTE.min.css") : Url("AdminLTE.css");
                         
                    public static readonly string AdminLTE_min_css = Url("AdminLTE.min.css");
                    public static readonly string bootstrap_rtl_min_css = Url("bootstrap-rtl.min.css");
                    public static readonly string profile_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/profile.min.css") ? Url("profile.min.css") : Url("profile.css");
                         
                    public static readonly string rtl_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/rtl.min.css") ? Url("rtl.min.css") : Url("rtl.css");
                         
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class skins {
                        private const string URLPATH = "~/Content/Admin/dist/css/skins";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string _all_skins_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/_all-skins.min.css") ? Url("_all-skins.min.css") : Url("_all-skins.css");
                             
                        public static readonly string _all_skins_min_css = Url("_all-skins.min.css");
                        public static readonly string skin_black_light_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/skin-black-light.min.css") ? Url("skin-black-light.min.css") : Url("skin-black-light.css");
                             
                        public static readonly string skin_black_light_min_css = Url("skin-black-light.min.css");
                        public static readonly string skin_black_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/skin-black.min.css") ? Url("skin-black.min.css") : Url("skin-black.css");
                             
                        public static readonly string skin_black_min_css = Url("skin-black.min.css");
                        public static readonly string skin_blue_light_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/skin-blue-light.min.css") ? Url("skin-blue-light.min.css") : Url("skin-blue-light.css");
                             
                        public static readonly string skin_blue_light_min_css = Url("skin-blue-light.min.css");
                        public static readonly string skin_blue_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/skin-blue.min.css") ? Url("skin-blue.min.css") : Url("skin-blue.css");
                             
                        public static readonly string skin_blue_min_css = Url("skin-blue.min.css");
                        public static readonly string skin_green_light_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/skin-green-light.min.css") ? Url("skin-green-light.min.css") : Url("skin-green-light.css");
                             
                        public static readonly string skin_green_light_min_css = Url("skin-green-light.min.css");
                        public static readonly string skin_green_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/skin-green.min.css") ? Url("skin-green.min.css") : Url("skin-green.css");
                             
                        public static readonly string skin_green_min_css = Url("skin-green.min.css");
                        public static readonly string skin_purple_light_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/skin-purple-light.min.css") ? Url("skin-purple-light.min.css") : Url("skin-purple-light.css");
                             
                        public static readonly string skin_purple_light_min_css = Url("skin-purple-light.min.css");
                        public static readonly string skin_purple_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/skin-purple.min.css") ? Url("skin-purple.min.css") : Url("skin-purple.css");
                             
                        public static readonly string skin_purple_min_css = Url("skin-purple.min.css");
                        public static readonly string skin_red_light_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/skin-red-light.min.css") ? Url("skin-red-light.min.css") : Url("skin-red-light.css");
                             
                        public static readonly string skin_red_light_min_css = Url("skin-red-light.min.css");
                        public static readonly string skin_red_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/skin-red.min.css") ? Url("skin-red.min.css") : Url("skin-red.css");
                             
                        public static readonly string skin_red_min_css = Url("skin-red.min.css");
                        public static readonly string skin_yellow_light_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/skin-yellow-light.min.css") ? Url("skin-yellow-light.min.css") : Url("skin-yellow-light.css");
                             
                        public static readonly string skin_yellow_light_min_css = Url("skin-yellow-light.min.css");
                        public static readonly string skin_yellow_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/skin-yellow.min.css") ? Url("skin-yellow.min.css") : Url("skin-yellow.css");
                             
                        public static readonly string skin_yellow_min_css = Url("skin-yellow.min.css");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class fonts {
                    private const string URLPATH = "~/Content/Admin/dist/fonts";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string fontawesome_webfont_woff = Url("fontawesome-webfont.woff");
                    public static readonly string fonts_fa_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fonts-fa.min.css") ? Url("fonts-fa.min.css") : Url("fonts-fa.css");
                         
                    public static readonly string MitraWeb_Bold_woff = Url("MitraWeb-Bold.woff");
                    public static readonly string MitraWeb_Regular_woff = Url("MitraWeb-Regular.woff");
                    public static readonly string YekanWeb_Bold_woff = Url("YekanWeb-Bold.woff");
                    public static readonly string YekanWeb_Regular_woff = Url("YekanWeb-Regular.woff");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class img {
                    private const string URLPATH = "~/Content/Admin/dist/img";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string adminLTE__png = Url("adminLTE-.png");
                    public static readonly string avatar_png = Url("avatar.png");
                    public static readonly string avatar04_png = Url("avatar04.png");
                    public static readonly string avatar2_png = Url("avatar2.png");
                    public static readonly string avatar3_png = Url("avatar3.png");
                    public static readonly string avatar5_png = Url("avatar5.png");
                    public static readonly string boxed_bg_jpg = Url("boxed-bg.jpg");
                    public static readonly string boxed_bg_png = Url("boxed-bg.png");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class credit {
                        private const string URLPATH = "~/Content/Admin/dist/img/credit";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string american_express_png = Url("american-express.png");
                        public static readonly string cirrus_png = Url("cirrus.png");
                        public static readonly string mastercard_png = Url("mastercard.png");
                        public static readonly string mestro_png = Url("mestro.png");
                        public static readonly string paypal_png = Url("paypal.png");
                        public static readonly string paypal2_png = Url("paypal2.png");
                        public static readonly string visa_png = Url("visa.png");
                    }
                
                    public static readonly string default_50x50_gif = Url("default-50x50.gif");
                    public static readonly string icons_png = Url("icons.png");
                    public static readonly string photo1_png = Url("photo1.png");
                    public static readonly string photo2_png = Url("photo2.png");
                    public static readonly string user1_128x128_jpg = Url("user1-128x128.jpg");
                    public static readonly string user2_160x160_jpg = Url("user2-160x160.jpg");
                    public static readonly string user3_128x128_jpg = Url("user3-128x128.jpg");
                    public static readonly string user4_128x128_jpg = Url("user4-128x128.jpg");
                    public static readonly string user5_128x128_jpg = Url("user5-128x128.jpg");
                    public static readonly string user6_128x128_jpg = Url("user6-128x128.jpg");
                    public static readonly string user7_128x128_jpg = Url("user7-128x128.jpg");
                    public static readonly string user8_128x128_jpg = Url("user8-128x128.jpg");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class js {
                    private const string URLPATH = "~/Content/Admin/dist/js";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string app_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/app.min.js") ? Url("app.min.js") : Url("app.js");
                    public static readonly string app_min_js = Url("app.min.js");
                    public static readonly string demo_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/demo.min.js") ? Url("demo.min.js") : Url("demo.js");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class pages {
                        private const string URLPATH = "~/Content/Admin/dist/js/pages";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string dashboard_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dashboard.min.js") ? Url("dashboard.min.js") : Url("dashboard.js");
                        public static readonly string dashboard2_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dashboard2.min.js") ? Url("dashboard2.min.js") : Url("dashboard2.js");
                    }
                
                }
            
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class plugins {
                private const string URLPATH = "~/Content/Admin/plugins";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class bootstrap_slider {
                    private const string URLPATH = "~/Content/Admin/plugins/bootstrap-slider";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string bootstrap_slider_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-slider.min.js") ? Url("bootstrap-slider.min.js") : Url("bootstrap-slider.js");
                    public static readonly string slider_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/slider.min.css") ? Url("slider.min.css") : Url("slider.css");
                         
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class bootstrap_wysihtml5 {
                    private const string URLPATH = "~/Content/Admin/plugins/bootstrap-wysihtml5";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string bootstrap3_wysihtml5_all_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap3-wysihtml5.all.min.js") ? Url("bootstrap3-wysihtml5.all.min.js") : Url("bootstrap3-wysihtml5.all.js");
                    public static readonly string bootstrap3_wysihtml5_all_min_js = Url("bootstrap3-wysihtml5.all.min.js");
                    public static readonly string bootstrap3_wysihtml5_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap3-wysihtml5.min.css") ? Url("bootstrap3-wysihtml5.min.css") : Url("bootstrap3-wysihtml5.css");
                         
                    public static readonly string bootstrap3_wysihtml5_min_css = Url("bootstrap3-wysihtml5.min.css");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class chartjs {
                    private const string URLPATH = "~/Content/Admin/plugins/chartjs";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string Chart_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Chart.min.js") ? Url("Chart.min.js") : Url("Chart.js");
                    public static readonly string Chart_min_js = Url("Chart.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class ckeditor {
                    private const string URLPATH = "~/Content/Admin/plugins/ckeditor";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class adapters {
                        private const string URLPATH = "~/Content/Admin/plugins/ckeditor/adapters";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string jquery_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.min.js") ? Url("jquery.min.js") : Url("jquery.js");
                    }
                
                    public static readonly string build_config_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/build-config.min.js") ? Url("build-config.min.js") : Url("build-config.js");
                    public static readonly string CHANGES_md = Url("CHANGES.md");
                    public static readonly string ckeditor_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ckeditor.min.js") ? Url("ckeditor.min.js") : Url("ckeditor.js");
                    public static readonly string config_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/config.min.js") ? Url("config.min.js") : Url("config.js");
                    public static readonly string contents_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/contents.min.css") ? Url("contents.min.css") : Url("contents.css");
                         
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class lang {
                        private const string URLPATH = "~/Content/Admin/plugins/ckeditor/lang";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string af_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/af.min.js") ? Url("af.min.js") : Url("af.js");
                        public static readonly string ar_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ar.min.js") ? Url("ar.min.js") : Url("ar.js");
                        public static readonly string bg_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bg.min.js") ? Url("bg.min.js") : Url("bg.js");
                        public static readonly string bn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bn.min.js") ? Url("bn.min.js") : Url("bn.js");
                        public static readonly string bs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bs.min.js") ? Url("bs.min.js") : Url("bs.js");
                        public static readonly string ca_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ca.min.js") ? Url("ca.min.js") : Url("ca.js");
                        public static readonly string cs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/cs.min.js") ? Url("cs.min.js") : Url("cs.js");
                        public static readonly string cy_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/cy.min.js") ? Url("cy.min.js") : Url("cy.js");
                        public static readonly string da_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/da.min.js") ? Url("da.min.js") : Url("da.js");
                        public static readonly string de_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/de.min.js") ? Url("de.min.js") : Url("de.js");
                        public static readonly string el_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/el.min.js") ? Url("el.min.js") : Url("el.js");
                        public static readonly string en_au_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en-au.min.js") ? Url("en-au.min.js") : Url("en-au.js");
                        public static readonly string en_ca_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en-ca.min.js") ? Url("en-ca.min.js") : Url("en-ca.js");
                        public static readonly string en_gb_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en-gb.min.js") ? Url("en-gb.min.js") : Url("en-gb.js");
                        public static readonly string en_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en.min.js") ? Url("en.min.js") : Url("en.js");
                        public static readonly string eo_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/eo.min.js") ? Url("eo.min.js") : Url("eo.js");
                        public static readonly string es_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/es.min.js") ? Url("es.min.js") : Url("es.js");
                        public static readonly string et_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/et.min.js") ? Url("et.min.js") : Url("et.js");
                        public static readonly string eu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/eu.min.js") ? Url("eu.min.js") : Url("eu.js");
                        public static readonly string fa_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fa.min.js") ? Url("fa.min.js") : Url("fa.js");
                        public static readonly string fi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fi.min.js") ? Url("fi.min.js") : Url("fi.js");
                        public static readonly string fo_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fo.min.js") ? Url("fo.min.js") : Url("fo.js");
                        public static readonly string fr_ca_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fr-ca.min.js") ? Url("fr-ca.min.js") : Url("fr-ca.js");
                        public static readonly string fr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fr.min.js") ? Url("fr.min.js") : Url("fr.js");
                        public static readonly string gl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/gl.min.js") ? Url("gl.min.js") : Url("gl.js");
                        public static readonly string gu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/gu.min.js") ? Url("gu.min.js") : Url("gu.js");
                        public static readonly string he_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/he.min.js") ? Url("he.min.js") : Url("he.js");
                        public static readonly string hi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hi.min.js") ? Url("hi.min.js") : Url("hi.js");
                        public static readonly string hr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hr.min.js") ? Url("hr.min.js") : Url("hr.js");
                        public static readonly string hu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hu.min.js") ? Url("hu.min.js") : Url("hu.js");
                        public static readonly string id_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/id.min.js") ? Url("id.min.js") : Url("id.js");
                        public static readonly string is_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/is.min.js") ? Url("is.min.js") : Url("is.js");
                        public static readonly string it_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/it.min.js") ? Url("it.min.js") : Url("it.js");
                        public static readonly string ja_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ja.min.js") ? Url("ja.min.js") : Url("ja.js");
                        public static readonly string ka_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ka.min.js") ? Url("ka.min.js") : Url("ka.js");
                        public static readonly string km_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/km.min.js") ? Url("km.min.js") : Url("km.js");
                        public static readonly string ko_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ko.min.js") ? Url("ko.min.js") : Url("ko.js");
                        public static readonly string ku_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ku.min.js") ? Url("ku.min.js") : Url("ku.js");
                        public static readonly string lt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lt.min.js") ? Url("lt.min.js") : Url("lt.js");
                        public static readonly string lv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lv.min.js") ? Url("lv.min.js") : Url("lv.js");
                        public static readonly string mk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mk.min.js") ? Url("mk.min.js") : Url("mk.js");
                        public static readonly string mn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mn.min.js") ? Url("mn.min.js") : Url("mn.js");
                        public static readonly string ms_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ms.min.js") ? Url("ms.min.js") : Url("ms.js");
                        public static readonly string nb_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nb.min.js") ? Url("nb.min.js") : Url("nb.js");
                        public static readonly string nl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nl.min.js") ? Url("nl.min.js") : Url("nl.js");
                        public static readonly string no_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/no.min.js") ? Url("no.min.js") : Url("no.js");
                        public static readonly string pl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pl.min.js") ? Url("pl.min.js") : Url("pl.js");
                        public static readonly string pt_br_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pt-br.min.js") ? Url("pt-br.min.js") : Url("pt-br.js");
                        public static readonly string pt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pt.min.js") ? Url("pt.min.js") : Url("pt.js");
                        public static readonly string ro_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ro.min.js") ? Url("ro.min.js") : Url("ro.js");
                        public static readonly string ru_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ru.min.js") ? Url("ru.min.js") : Url("ru.js");
                        public static readonly string si_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/si.min.js") ? Url("si.min.js") : Url("si.js");
                        public static readonly string sk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sk.min.js") ? Url("sk.min.js") : Url("sk.js");
                        public static readonly string sl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sl.min.js") ? Url("sl.min.js") : Url("sl.js");
                        public static readonly string sq_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sq.min.js") ? Url("sq.min.js") : Url("sq.js");
                        public static readonly string sr_latn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sr-latn.min.js") ? Url("sr-latn.min.js") : Url("sr-latn.js");
                        public static readonly string sr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sr.min.js") ? Url("sr.min.js") : Url("sr.js");
                        public static readonly string sv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sv.min.js") ? Url("sv.min.js") : Url("sv.js");
                        public static readonly string th_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/th.min.js") ? Url("th.min.js") : Url("th.js");
                        public static readonly string tr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tr.min.js") ? Url("tr.min.js") : Url("tr.js");
                        public static readonly string ug_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ug.min.js") ? Url("ug.min.js") : Url("ug.js");
                        public static readonly string uk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/uk.min.js") ? Url("uk.min.js") : Url("uk.js");
                        public static readonly string vi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/vi.min.js") ? Url("vi.min.js") : Url("vi.js");
                        public static readonly string zh_cn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/zh-cn.min.js") ? Url("zh-cn.min.js") : Url("zh-cn.js");
                        public static readonly string zh_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/zh.min.js") ? Url("zh.min.js") : Url("zh.js");
                    }
                
                    public static readonly string LICENSE_md = Url("LICENSE.md");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class plugins {
                        private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class a11yhelp {
                            private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/a11yhelp";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class dialogs {
                                private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/a11yhelp/dialogs";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string a11yhelp_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/a11yhelp.min.js") ? Url("a11yhelp.min.js") : Url("a11yhelp.js");
                                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                                public static class lang {
                                    private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/a11yhelp/dialogs/lang";
                                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                    public static readonly string _translationstatus_txt = Url("_translationstatus.txt");
                                    public static readonly string ar_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ar.min.js") ? Url("ar.min.js") : Url("ar.js");
                                    public static readonly string bg_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bg.min.js") ? Url("bg.min.js") : Url("bg.js");
                                    public static readonly string ca_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ca.min.js") ? Url("ca.min.js") : Url("ca.js");
                                    public static readonly string cs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/cs.min.js") ? Url("cs.min.js") : Url("cs.js");
                                    public static readonly string cy_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/cy.min.js") ? Url("cy.min.js") : Url("cy.js");
                                    public static readonly string da_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/da.min.js") ? Url("da.min.js") : Url("da.js");
                                    public static readonly string de_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/de.min.js") ? Url("de.min.js") : Url("de.js");
                                    public static readonly string el_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/el.min.js") ? Url("el.min.js") : Url("el.js");
                                    public static readonly string en_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en.min.js") ? Url("en.min.js") : Url("en.js");
                                    public static readonly string eo_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/eo.min.js") ? Url("eo.min.js") : Url("eo.js");
                                    public static readonly string es_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/es.min.js") ? Url("es.min.js") : Url("es.js");
                                    public static readonly string et_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/et.min.js") ? Url("et.min.js") : Url("et.js");
                                    public static readonly string fa_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fa.min.js") ? Url("fa.min.js") : Url("fa.js");
                                    public static readonly string fi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fi.min.js") ? Url("fi.min.js") : Url("fi.js");
                                    public static readonly string fr_ca_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fr-ca.min.js") ? Url("fr-ca.min.js") : Url("fr-ca.js");
                                    public static readonly string fr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fr.min.js") ? Url("fr.min.js") : Url("fr.js");
                                    public static readonly string gl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/gl.min.js") ? Url("gl.min.js") : Url("gl.js");
                                    public static readonly string gu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/gu.min.js") ? Url("gu.min.js") : Url("gu.js");
                                    public static readonly string he_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/he.min.js") ? Url("he.min.js") : Url("he.js");
                                    public static readonly string hi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hi.min.js") ? Url("hi.min.js") : Url("hi.js");
                                    public static readonly string hr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hr.min.js") ? Url("hr.min.js") : Url("hr.js");
                                    public static readonly string hu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hu.min.js") ? Url("hu.min.js") : Url("hu.js");
                                    public static readonly string id_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/id.min.js") ? Url("id.min.js") : Url("id.js");
                                    public static readonly string it_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/it.min.js") ? Url("it.min.js") : Url("it.js");
                                    public static readonly string ja_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ja.min.js") ? Url("ja.min.js") : Url("ja.js");
                                    public static readonly string km_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/km.min.js") ? Url("km.min.js") : Url("km.js");
                                    public static readonly string ko_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ko.min.js") ? Url("ko.min.js") : Url("ko.js");
                                    public static readonly string ku_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ku.min.js") ? Url("ku.min.js") : Url("ku.js");
                                    public static readonly string lt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lt.min.js") ? Url("lt.min.js") : Url("lt.js");
                                    public static readonly string lv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lv.min.js") ? Url("lv.min.js") : Url("lv.js");
                                    public static readonly string mk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mk.min.js") ? Url("mk.min.js") : Url("mk.js");
                                    public static readonly string mn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mn.min.js") ? Url("mn.min.js") : Url("mn.js");
                                    public static readonly string nb_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nb.min.js") ? Url("nb.min.js") : Url("nb.js");
                                    public static readonly string nl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nl.min.js") ? Url("nl.min.js") : Url("nl.js");
                                    public static readonly string no_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/no.min.js") ? Url("no.min.js") : Url("no.js");
                                    public static readonly string pl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pl.min.js") ? Url("pl.min.js") : Url("pl.js");
                                    public static readonly string pt_br_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pt-br.min.js") ? Url("pt-br.min.js") : Url("pt-br.js");
                                    public static readonly string pt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pt.min.js") ? Url("pt.min.js") : Url("pt.js");
                                    public static readonly string ro_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ro.min.js") ? Url("ro.min.js") : Url("ro.js");
                                    public static readonly string ru_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ru.min.js") ? Url("ru.min.js") : Url("ru.js");
                                    public static readonly string si_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/si.min.js") ? Url("si.min.js") : Url("si.js");
                                    public static readonly string sk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sk.min.js") ? Url("sk.min.js") : Url("sk.js");
                                    public static readonly string sl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sl.min.js") ? Url("sl.min.js") : Url("sl.js");
                                    public static readonly string sq_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sq.min.js") ? Url("sq.min.js") : Url("sq.js");
                                    public static readonly string sr_latn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sr-latn.min.js") ? Url("sr-latn.min.js") : Url("sr-latn.js");
                                    public static readonly string sr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sr.min.js") ? Url("sr.min.js") : Url("sr.js");
                                    public static readonly string sv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sv.min.js") ? Url("sv.min.js") : Url("sv.js");
                                    public static readonly string th_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/th.min.js") ? Url("th.min.js") : Url("th.js");
                                    public static readonly string tr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tr.min.js") ? Url("tr.min.js") : Url("tr.js");
                                    public static readonly string ug_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ug.min.js") ? Url("ug.min.js") : Url("ug.js");
                                    public static readonly string uk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/uk.min.js") ? Url("uk.min.js") : Url("uk.js");
                                    public static readonly string vi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/vi.min.js") ? Url("vi.min.js") : Url("vi.js");
                                    public static readonly string zh_cn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/zh-cn.min.js") ? Url("zh-cn.min.js") : Url("zh-cn.js");
                                    public static readonly string zh_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/zh.min.js") ? Url("zh.min.js") : Url("zh.js");
                                }
                            
                            }
                        
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class about {
                            private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/about";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class dialogs {
                                private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/about/dialogs";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string about_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/about.min.js") ? Url("about.min.js") : Url("about.js");
                                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                                public static class hidpi {
                                    private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/about/dialogs/hidpi";
                                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                    public static readonly string logo_ckeditor_png = Url("logo_ckeditor.png");
                                }
                            
                                public static readonly string logo_ckeditor_png = Url("logo_ckeditor.png");
                            }
                        
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class clipboard {
                            private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/clipboard";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class dialogs {
                                private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/clipboard/dialogs";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string paste_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/paste.min.js") ? Url("paste.min.js") : Url("paste.js");
                            }
                        
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class dialog {
                            private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/dialog";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string dialogDefinition_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialogDefinition.min.js") ? Url("dialogDefinition.min.js") : Url("dialogDefinition.js");
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class fakeobjects {
                            private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/fakeobjects";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class images {
                                private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/fakeobjects/images";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string spacer_gif = Url("spacer.gif");
                            }
                        
                        }
                    
                        public static readonly string icons_png = Url("icons.png");
                        public static readonly string icons_hidpi_png = Url("icons_hidpi.png");
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class image {
                            private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/image";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class dialogs {
                                private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/image/dialogs";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string image_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/image.min.js") ? Url("image.min.js") : Url("image.js");
                            }
                        
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class images {
                                private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/image/images";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string noimage_png = Url("noimage.png");
                            }
                        
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class link {
                            private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/link";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class dialogs {
                                private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/link/dialogs";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string anchor_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/anchor.min.js") ? Url("anchor.min.js") : Url("anchor.js");
                                public static readonly string link_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/link.min.js") ? Url("link.min.js") : Url("link.js");
                            }
                        
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class images {
                                private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/link/images";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string anchor_png = Url("anchor.png");
                                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                                public static class hidpi {
                                    private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/link/images/hidpi";
                                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                    public static readonly string anchor_png = Url("anchor.png");
                                }
                            
                            }
                        
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class magicline {
                            private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/magicline";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class images {
                                private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/magicline/images";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                                public static class hidpi {
                                    private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/magicline/images/hidpi";
                                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                    public static readonly string icon_png = Url("icon.png");
                                }
                            
                                public static readonly string icon_png = Url("icon.png");
                            }
                        
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class pastefromword {
                            private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/pastefromword";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class filter {
                                private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/pastefromword/filter";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string default_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/default.min.js") ? Url("default.min.js") : Url("default.js");
                            }
                        
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class scayt {
                            private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/scayt";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class dialogs {
                                private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/scayt/dialogs";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string options_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/options.min.js") ? Url("options.min.js") : Url("options.js");
                                public static readonly string toolbar_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/toolbar.min.css") ? Url("toolbar.min.css") : Url("toolbar.css");
                                     
                            }
                        
                            public static readonly string LICENSE_md = Url("LICENSE.md");
                            public static readonly string README_md = Url("README.md");
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class specialchar {
                            private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/specialchar";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class dialogs {
                                private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/specialchar/dialogs";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                                public static class lang {
                                    private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/specialchar/dialogs/lang";
                                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                    public static readonly string _translationstatus_txt = Url("_translationstatus.txt");
                                    public static readonly string ar_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ar.min.js") ? Url("ar.min.js") : Url("ar.js");
                                    public static readonly string bg_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bg.min.js") ? Url("bg.min.js") : Url("bg.js");
                                    public static readonly string ca_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ca.min.js") ? Url("ca.min.js") : Url("ca.js");
                                    public static readonly string cs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/cs.min.js") ? Url("cs.min.js") : Url("cs.js");
                                    public static readonly string cy_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/cy.min.js") ? Url("cy.min.js") : Url("cy.js");
                                    public static readonly string de_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/de.min.js") ? Url("de.min.js") : Url("de.js");
                                    public static readonly string el_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/el.min.js") ? Url("el.min.js") : Url("el.js");
                                    public static readonly string en_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en.min.js") ? Url("en.min.js") : Url("en.js");
                                    public static readonly string eo_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/eo.min.js") ? Url("eo.min.js") : Url("eo.js");
                                    public static readonly string es_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/es.min.js") ? Url("es.min.js") : Url("es.js");
                                    public static readonly string et_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/et.min.js") ? Url("et.min.js") : Url("et.js");
                                    public static readonly string fa_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fa.min.js") ? Url("fa.min.js") : Url("fa.js");
                                    public static readonly string fi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fi.min.js") ? Url("fi.min.js") : Url("fi.js");
                                    public static readonly string fr_ca_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fr-ca.min.js") ? Url("fr-ca.min.js") : Url("fr-ca.js");
                                    public static readonly string fr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fr.min.js") ? Url("fr.min.js") : Url("fr.js");
                                    public static readonly string gl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/gl.min.js") ? Url("gl.min.js") : Url("gl.js");
                                    public static readonly string he_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/he.min.js") ? Url("he.min.js") : Url("he.js");
                                    public static readonly string hr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hr.min.js") ? Url("hr.min.js") : Url("hr.js");
                                    public static readonly string hu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hu.min.js") ? Url("hu.min.js") : Url("hu.js");
                                    public static readonly string id_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/id.min.js") ? Url("id.min.js") : Url("id.js");
                                    public static readonly string it_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/it.min.js") ? Url("it.min.js") : Url("it.js");
                                    public static readonly string ja_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ja.min.js") ? Url("ja.min.js") : Url("ja.js");
                                    public static readonly string km_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/km.min.js") ? Url("km.min.js") : Url("km.js");
                                    public static readonly string ku_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ku.min.js") ? Url("ku.min.js") : Url("ku.js");
                                    public static readonly string lv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lv.min.js") ? Url("lv.min.js") : Url("lv.js");
                                    public static readonly string nb_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nb.min.js") ? Url("nb.min.js") : Url("nb.js");
                                    public static readonly string nl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nl.min.js") ? Url("nl.min.js") : Url("nl.js");
                                    public static readonly string no_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/no.min.js") ? Url("no.min.js") : Url("no.js");
                                    public static readonly string pl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pl.min.js") ? Url("pl.min.js") : Url("pl.js");
                                    public static readonly string pt_br_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pt-br.min.js") ? Url("pt-br.min.js") : Url("pt-br.js");
                                    public static readonly string pt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pt.min.js") ? Url("pt.min.js") : Url("pt.js");
                                    public static readonly string ru_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ru.min.js") ? Url("ru.min.js") : Url("ru.js");
                                    public static readonly string si_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/si.min.js") ? Url("si.min.js") : Url("si.js");
                                    public static readonly string sk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sk.min.js") ? Url("sk.min.js") : Url("sk.js");
                                    public static readonly string sl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sl.min.js") ? Url("sl.min.js") : Url("sl.js");
                                    public static readonly string sq_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sq.min.js") ? Url("sq.min.js") : Url("sq.js");
                                    public static readonly string sv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sv.min.js") ? Url("sv.min.js") : Url("sv.js");
                                    public static readonly string th_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/th.min.js") ? Url("th.min.js") : Url("th.js");
                                    public static readonly string tr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tr.min.js") ? Url("tr.min.js") : Url("tr.js");
                                    public static readonly string ug_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ug.min.js") ? Url("ug.min.js") : Url("ug.js");
                                    public static readonly string uk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/uk.min.js") ? Url("uk.min.js") : Url("uk.js");
                                    public static readonly string vi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/vi.min.js") ? Url("vi.min.js") : Url("vi.js");
                                    public static readonly string zh_cn_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/zh-cn.min.js") ? Url("zh-cn.min.js") : Url("zh-cn.js");
                                    public static readonly string zh_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/zh.min.js") ? Url("zh.min.js") : Url("zh.js");
                                }
                            
                                public static readonly string specialchar_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/specialchar.min.js") ? Url("specialchar.min.js") : Url("specialchar.js");
                            }
                        
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class table {
                            private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/table";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class dialogs {
                                private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/table/dialogs";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string table_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/table.min.js") ? Url("table.min.js") : Url("table.js");
                            }
                        
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class tabletools {
                            private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/tabletools";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class dialogs {
                                private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/tabletools/dialogs";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string tableCell_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tableCell.min.js") ? Url("tableCell.min.js") : Url("tableCell.js");
                            }
                        
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class wsc {
                            private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/wsc";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class dialogs {
                                private const string URLPATH = "~/Content/Admin/plugins/ckeditor/plugins/wsc/dialogs";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string ciframe_html = Url("ciframe.html");
                                public static readonly string tmp_html = Url("tmp.html");
                                public static readonly string tmpFrameset_html = Url("tmpFrameset.html");
                                public static readonly string wsc_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/wsc.min.css") ? Url("wsc.min.css") : Url("wsc.css");
                                     
                                public static readonly string wsc_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/wsc.min.js") ? Url("wsc.min.js") : Url("wsc.js");
                                public static readonly string wsc_ie_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/wsc_ie.min.js") ? Url("wsc_ie.min.js") : Url("wsc_ie.js");
                            }
                        
                            public static readonly string LICENSE_md = Url("LICENSE.md");
                            public static readonly string README_md = Url("README.md");
                        }
                    
                    }
                
                    public static readonly string README_md = Url("README.md");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class skins {
                        private const string URLPATH = "~/Content/Admin/plugins/ckeditor/skins";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class moono {
                            private const string URLPATH = "~/Content/Admin/plugins/ckeditor/skins/moono";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            public static readonly string dialog_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog.min.css") ? Url("dialog.min.css") : Url("dialog.css");
                                 
                            public static readonly string dialog_ie_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog_ie.min.css") ? Url("dialog_ie.min.css") : Url("dialog_ie.css");
                                 
                            public static readonly string dialog_ie7_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog_ie7.min.css") ? Url("dialog_ie7.min.css") : Url("dialog_ie7.css");
                                 
                            public static readonly string dialog_ie8_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog_ie8.min.css") ? Url("dialog_ie8.min.css") : Url("dialog_ie8.css");
                                 
                            public static readonly string dialog_iequirks_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog_iequirks.min.css") ? Url("dialog_iequirks.min.css") : Url("dialog_iequirks.css");
                                 
                            public static readonly string dialog_opera_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dialog_opera.min.css") ? Url("dialog_opera.min.css") : Url("dialog_opera.css");
                                 
                            public static readonly string editor_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor.min.css") ? Url("editor.min.css") : Url("editor.css");
                                 
                            public static readonly string editor_gecko_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_gecko.min.css") ? Url("editor_gecko.min.css") : Url("editor_gecko.css");
                                 
                            public static readonly string editor_ie_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_ie.min.css") ? Url("editor_ie.min.css") : Url("editor_ie.css");
                                 
                            public static readonly string editor_ie7_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_ie7.min.css") ? Url("editor_ie7.min.css") : Url("editor_ie7.css");
                                 
                            public static readonly string editor_ie8_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_ie8.min.css") ? Url("editor_ie8.min.css") : Url("editor_ie8.css");
                                 
                            public static readonly string editor_iequirks_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/editor_iequirks.min.css") ? Url("editor_iequirks.min.css") : Url("editor_iequirks.css");
                                 
                            public static readonly string icons_png = Url("icons.png");
                            public static readonly string icons_hidpi_png = Url("icons_hidpi.png");
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class images {
                                private const string URLPATH = "~/Content/Admin/plugins/ckeditor/skins/moono/images";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string arrow_png = Url("arrow.png");
                                public static readonly string close_png = Url("close.png");
                                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                                public static class hidpi {
                                    private const string URLPATH = "~/Content/Admin/plugins/ckeditor/skins/moono/images/hidpi";
                                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                    public static readonly string close_png = Url("close.png");
                                    public static readonly string lock_open_png = Url("lock-open.png");
                                    public static readonly string lock_png = Url("lock.png");
                                    public static readonly string refresh_png = Url("refresh.png");
                                }
                            
                                public static readonly string lock_open_png = Url("lock-open.png");
                                public static readonly string lock_png = Url("lock.png");
                                public static readonly string refresh_png = Url("refresh.png");
                            }
                        
                            public static readonly string readme_md = Url("readme.md");
                        }
                    
                    }
                
                    public static readonly string styles_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/styles.min.js") ? Url("styles.min.js") : Url("styles.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class colorpicker {
                    private const string URLPATH = "~/Content/Admin/plugins/colorpicker";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string bootstrap_colorpicker_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-colorpicker.min.css") ? Url("bootstrap-colorpicker.min.css") : Url("bootstrap-colorpicker.css");
                         
                    public static readonly string bootstrap_colorpicker_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-colorpicker.min.js") ? Url("bootstrap-colorpicker.min.js") : Url("bootstrap-colorpicker.js");
                    public static readonly string bootstrap_colorpicker_min_css = Url("bootstrap-colorpicker.min.css");
                    public static readonly string bootstrap_colorpicker_min_js = Url("bootstrap-colorpicker.min.js");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class img {
                        private const string URLPATH = "~/Content/Admin/plugins/colorpicker/img";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string alpha_horizontal_png = Url("alpha-horizontal.png");
                        public static readonly string alpha_png = Url("alpha.png");
                        public static readonly string hue_horizontal_png = Url("hue-horizontal.png");
                        public static readonly string hue_png = Url("hue.png");
                        public static readonly string saturation_png = Url("saturation.png");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class datatables {
                    private const string URLPATH = "~/Content/Admin/plugins/datatables";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string dataTables_bootstrap_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dataTables.bootstrap.min.css") ? Url("dataTables.bootstrap.min.css") : Url("dataTables.bootstrap.css");
                         
                    public static readonly string dataTables_bootstrap_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dataTables.bootstrap.min.js") ? Url("dataTables.bootstrap.min.js") : Url("dataTables.bootstrap.js");
                    public static readonly string dataTables_bootstrap_min_js = Url("dataTables.bootstrap.min.js");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class extensions {
                        private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class AutoFill {
                            private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/AutoFill";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class css {
                                private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/AutoFill/css";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string dataTables_autoFill_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dataTables.autoFill.min.css") ? Url("dataTables.autoFill.min.css") : Url("dataTables.autoFill.css");
                                     
                                public static readonly string dataTables_autoFill_min_css = Url("dataTables.autoFill.min.css");
                            }
                        
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class examples {
                                private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/AutoFill/examples";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string columns_html = Url("columns.html");
                                public static readonly string complete_callback_html = Url("complete-callback.html");
                                public static readonly string fill_both_html = Url("fill-both.html");
                                public static readonly string fill_horizontal_html = Url("fill-horizontal.html");
                                public static readonly string index_html = Url("index.html");
                                public static readonly string scrolling_html = Url("scrolling.html");
                                public static readonly string simple_html = Url("simple.html");
                                public static readonly string step_callback_html = Url("step-callback.html");
                            }
                        
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class images {
                                private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/AutoFill/images";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string filler_png = Url("filler.png");
                            }
                        
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class js {
                                private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/AutoFill/js";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string dataTables_autoFill_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dataTables.autoFill.min.js") ? Url("dataTables.autoFill.min.js") : Url("dataTables.autoFill.js");
                                public static readonly string dataTables_autoFill_min_js = Url("dataTables.autoFill.min.js");
                            }
                        
                            public static readonly string Readme_txt = Url("Readme.txt");
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class ColReorder {
                            private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/ColReorder";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class css {
                                private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/ColReorder/css";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string dataTables_colReorder_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dataTables.colReorder.min.css") ? Url("dataTables.colReorder.min.css") : Url("dataTables.colReorder.css");
                                     
                                public static readonly string dataTables_colReorder_min_css = Url("dataTables.colReorder.min.css");
                            }
                        
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class examples {
                                private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/ColReorder/examples";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string alt_insert_html = Url("alt_insert.html");
                                public static readonly string col_filter_html = Url("col_filter.html");
                                public static readonly string colvis_html = Url("colvis.html");
                                public static readonly string fixedcolumns_html = Url("fixedcolumns.html");
                                public static readonly string fixedheader_html = Url("fixedheader.html");
                                public static readonly string index_html = Url("index.html");
                                public static readonly string jqueryui_html = Url("jqueryui.html");
                                public static readonly string new_init_html = Url("new_init.html");
                                public static readonly string predefined_html = Url("predefined.html");
                                public static readonly string realtime_html = Url("realtime.html");
                                public static readonly string reset_html = Url("reset.html");
                                public static readonly string scrolling_html = Url("scrolling.html");
                                public static readonly string server_side_html = Url("server_side.html");
                                public static readonly string simple_html = Url("simple.html");
                                public static readonly string state_save_html = Url("state_save.html");
                            }
                        
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class images {
                                private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/ColReorder/images";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string insert_png = Url("insert.png");
                            }
                        
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class js {
                                private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/ColReorder/js";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string dataTables_colReorder_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dataTables.colReorder.min.js") ? Url("dataTables.colReorder.min.js") : Url("dataTables.colReorder.js");
                                public static readonly string dataTables_colReorder_min_js = Url("dataTables.colReorder.min.js");
                            }
                        
                            public static readonly string License_txt = Url("License.txt");
                            public static readonly string Readme_md = Url("Readme.md");
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class ColVis {
                            private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/ColVis";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class css {
                                private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/ColVis/css";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string dataTables_colVis_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dataTables.colVis.min.css") ? Url("dataTables.colVis.min.css") : Url("dataTables.colVis.css");
                                     
                                public static readonly string dataTables_colvis_jqueryui_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dataTables.colvis.jqueryui.min.css") ? Url("dataTables.colvis.jqueryui.min.css") : Url("dataTables.colvis.jqueryui.css");
                                     
                                public static readonly string dataTables_colVis_min_css = Url("dataTables.colVis.min.css");
                            }
                        
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class examples {
                                private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/ColVis/examples";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string button_order_html = Url("button_order.html");
                                public static readonly string exclude_columns_html = Url("exclude_columns.html");
                                public static readonly string group_columns_html = Url("group_columns.html");
                                public static readonly string index_html = Url("index.html");
                                public static readonly string jqueryui_html = Url("jqueryui.html");
                                public static readonly string mouseover_html = Url("mouseover.html");
                                public static readonly string new_init_html = Url("new_init.html");
                                public static readonly string restore_html = Url("restore.html");
                                public static readonly string simple_html = Url("simple.html");
                                public static readonly string text_html = Url("text.html");
                                public static readonly string title_callback_html = Url("title_callback.html");
                                public static readonly string two_tables_html = Url("two_tables.html");
                                public static readonly string two_tables_identical_html = Url("two_tables_identical.html");
                            }
                        
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class js {
                                private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/ColVis/js";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string dataTables_colVis_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dataTables.colVis.min.js") ? Url("dataTables.colVis.min.js") : Url("dataTables.colVis.js");
                                public static readonly string dataTables_colVis_min_js = Url("dataTables.colVis.min.js");
                            }
                        
                            public static readonly string License_txt = Url("License.txt");
                            public static readonly string Readme_md = Url("Readme.md");
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class FixedColumns {
                            private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/FixedColumns";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class css {
                                private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/FixedColumns/css";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string dataTables_fixedColumns_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dataTables.fixedColumns.min.css") ? Url("dataTables.fixedColumns.min.css") : Url("dataTables.fixedColumns.css");
                                     
                                public static readonly string dataTables_fixedColumns_min_css = Url("dataTables.fixedColumns.min.css");
                            }
                        
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class examples {
                                private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/FixedColumns/examples";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string bootstrap_html = Url("bootstrap.html");
                                public static readonly string col_filter_html = Url("col_filter.html");
                                public static readonly string colvis_html = Url("colvis.html");
                                public static readonly string css_size_html = Url("css_size.html");
                                public static readonly string index_html = Url("index.html");
                                public static readonly string index_column_html = Url("index_column.html");
                                public static readonly string left_right_columns_html = Url("left_right_columns.html");
                                public static readonly string right_column_html = Url("right_column.html");
                                public static readonly string rowspan_html = Url("rowspan.html");
                                public static readonly string server_side_processing_html = Url("server-side-processing.html");
                                public static readonly string simple_html = Url("simple.html");
                                public static readonly string size_fixed_html = Url("size_fixed.html");
                                public static readonly string size_fluid_html = Url("size_fluid.html");
                                public static readonly string two_columns_html = Url("two_columns.html");
                            }
                        
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class js {
                                private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/FixedColumns/js";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string dataTables_fixedColumns_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dataTables.fixedColumns.min.js") ? Url("dataTables.fixedColumns.min.js") : Url("dataTables.fixedColumns.js");
                                public static readonly string dataTables_fixedColumns_min_js = Url("dataTables.fixedColumns.min.js");
                            }
                        
                            public static readonly string License_txt = Url("License.txt");
                            public static readonly string Readme_md = Url("Readme.md");
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class FixedHeader {
                            private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/FixedHeader";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class css {
                                private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/FixedHeader/css";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string dataTables_fixedHeader_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dataTables.fixedHeader.min.css") ? Url("dataTables.fixedHeader.min.css") : Url("dataTables.fixedHeader.css");
                                     
                                public static readonly string dataTables_fixedHeader_min_css = Url("dataTables.fixedHeader.min.css");
                            }
                        
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class examples {
                                private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/FixedHeader/examples";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string header_footer_html = Url("header_footer.html");
                                public static readonly string index_html = Url("index.html");
                                public static readonly string simple_html = Url("simple.html");
                                public static readonly string top_left_right_html = Url("top_left_right.html");
                                public static readonly string two_tables_html = Url("two_tables.html");
                                public static readonly string zIndexes_html = Url("zIndexes.html");
                            }
                        
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class js {
                                private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/FixedHeader/js";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string dataTables_fixedHeader_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dataTables.fixedHeader.min.js") ? Url("dataTables.fixedHeader.min.js") : Url("dataTables.fixedHeader.js");
                                public static readonly string dataTables_fixedHeader_min_js = Url("dataTables.fixedHeader.min.js");
                            }
                        
                            public static readonly string Readme_txt = Url("Readme.txt");
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class KeyTable {
                            private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/KeyTable";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class css {
                                private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/KeyTable/css";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string dataTables_keyTable_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dataTables.keyTable.min.css") ? Url("dataTables.keyTable.min.css") : Url("dataTables.keyTable.css");
                                     
                                public static readonly string dataTables_keyTable_min_css = Url("dataTables.keyTable.min.css");
                            }
                        
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class examples {
                                private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/KeyTable/examples";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string events_html = Url("events.html");
                                public static readonly string html_html = Url("html.html");
                                public static readonly string index_html = Url("index.html");
                                public static readonly string scrolling_html = Url("scrolling.html");
                                public static readonly string simple_html = Url("simple.html");
                            }
                        
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class js {
                                private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/KeyTable/js";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string dataTables_keyTable_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dataTables.keyTable.min.js") ? Url("dataTables.keyTable.min.js") : Url("dataTables.keyTable.js");
                                public static readonly string dataTables_keyTable_min_js = Url("dataTables.keyTable.min.js");
                            }
                        
                            public static readonly string Readme_txt = Url("Readme.txt");
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class Responsive {
                            private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/Responsive";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class css {
                                private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/Responsive/css";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string dataTables_responsive_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dataTables.responsive.min.css") ? Url("dataTables.responsive.min.css") : Url("dataTables.responsive.css");
                                     
                                public static readonly string dataTables_responsive_scss = Url("dataTables.responsive.scss");
                            }
                        
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class examples {
                                private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/Responsive/examples";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                                public static class child_rows {
                                    private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/Responsive/examples/child-rows";
                                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                    public static readonly string column_control_html = Url("column-control.html");
                                    public static readonly string custom_renderer_html = Url("custom-renderer.html");
                                    public static readonly string disable_child_rows_html = Url("disable-child-rows.html");
                                    public static readonly string index_html = Url("index.html");
                                    public static readonly string right_column_html = Url("right-column.html");
                                    public static readonly string whole_row_control_html = Url("whole-row-control.html");
                                }
                            
                                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                                public static class display_control {
                                    private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/Responsive/examples/display-control";
                                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                    public static readonly string auto_html = Url("auto.html");
                                    public static readonly string classes_html = Url("classes.html");
                                    public static readonly string complexHeader_html = Url("complexHeader.html");
                                    public static readonly string fixedHeader_html = Url("fixedHeader.html");
                                    public static readonly string index_html = Url("index.html");
                                    public static readonly string init_classes_html = Url("init-classes.html");
                                }
                            
                                public static readonly string index_html = Url("index.html");
                                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                                public static class initialisation {
                                    private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/Responsive/examples/initialisation";
                                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                    public static readonly string ajax_html = Url("ajax.html");
                                    public static readonly string className_html = Url("className.html");
                                    public static readonly string default_html = Url("default.html");
                                    public static readonly string index_html = Url("index.html");
                                    public static readonly string new_html = Url("new.html");
                                    public static readonly string option_html = Url("option.html");
                                }
                            
                                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                                public static class styling {
                                    private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/Responsive/examples/styling";
                                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                    public static readonly string bootstrap_html = Url("bootstrap.html");
                                    public static readonly string compact_html = Url("compact.html");
                                    public static readonly string foundation_html = Url("foundation.html");
                                    public static readonly string index_html = Url("index.html");
                                    public static readonly string scrolling_html = Url("scrolling.html");
                                }
                            
                            }
                        
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class js {
                                private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/Responsive/js";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string dataTables_responsive_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dataTables.responsive.min.js") ? Url("dataTables.responsive.min.js") : Url("dataTables.responsive.js");
                                public static readonly string dataTables_responsive_min_js = Url("dataTables.responsive.min.js");
                            }
                        
                            public static readonly string License_txt = Url("License.txt");
                            public static readonly string Readme_md = Url("Readme.md");
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class Scroller {
                            private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/Scroller";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class css {
                                private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/Scroller/css";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string dataTables_scroller_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dataTables.scroller.min.css") ? Url("dataTables.scroller.min.css") : Url("dataTables.scroller.css");
                                     
                                public static readonly string dataTables_scroller_min_css = Url("dataTables.scroller.min.css");
                            }
                        
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class examples {
                                private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/Scroller/examples";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string api_scrolling_html = Url("api_scrolling.html");
                                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                                public static class data {
                                    private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/Scroller/examples/data";
                                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                    public static readonly string _2500_txt = Url("2500.txt");
                                    public static readonly string ssp_php = Url("ssp.php");
                                }
                            
                                public static readonly string index_html = Url("index.html");
                                public static readonly string large_js_source_html = Url("large_js_source.html");
                                public static readonly string server_side_processing_html = Url("server-side_processing.html");
                                public static readonly string simple_html = Url("simple.html");
                                public static readonly string state_saving_html = Url("state_saving.html");
                            }
                        
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class images {
                                private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/Scroller/images";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string loading_background_png = Url("loading-background.png");
                            }
                        
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class js {
                                private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/Scroller/js";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string dataTables_scroller_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dataTables.scroller.min.js") ? Url("dataTables.scroller.min.js") : Url("dataTables.scroller.js");
                                public static readonly string dataTables_scroller_min_js = Url("dataTables.scroller.min.js");
                            }
                        
                            public static readonly string Readme_txt = Url("Readme.txt");
                        }
                    
                        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                        public static class TableTools {
                            private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/TableTools";
                            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class css {
                                private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/TableTools/css";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string dataTables_tableTools_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dataTables.tableTools.min.css") ? Url("dataTables.tableTools.min.css") : Url("dataTables.tableTools.css");
                                     
                                public static readonly string dataTables_tableTools_min_css = Url("dataTables.tableTools.min.css");
                            }
                        
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class examples {
                                private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/TableTools/examples";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string ajax_html = Url("ajax.html");
                                public static readonly string alter_buttons_html = Url("alter_buttons.html");
                                public static readonly string bootstrap_html = Url("bootstrap.html");
                                public static readonly string button_text_html = Url("button_text.html");
                                public static readonly string collection_html = Url("collection.html");
                                public static readonly string defaults_html = Url("defaults.html");
                                public static readonly string index_html = Url("index.html");
                                public static readonly string jqueryui_html = Url("jqueryui.html");
                                public static readonly string multi_instance_html = Url("multi_instance.html");
                                public static readonly string multiple_tables_html = Url("multiple_tables.html");
                                public static readonly string new_init_html = Url("new_init.html");
                                public static readonly string pdf_message_html = Url("pdf_message.html");
                                public static readonly string plug_in_html = Url("plug-in.html");
                                public static readonly string select_column_html = Url("select_column.html");
                                public static readonly string select_multi_html = Url("select_multi.html");
                                public static readonly string select_os_html = Url("select_os.html");
                                public static readonly string select_single_html = Url("select_single.html");
                                public static readonly string simple_html = Url("simple.html");
                                public static readonly string swf_path_html = Url("swf_path.html");
                            }
                        
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class images {
                                private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/TableTools/images";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string collection_png = Url("collection.png");
                                public static readonly string collection_hover_png = Url("collection_hover.png");
                                public static readonly string copy_png = Url("copy.png");
                                public static readonly string copy_hover_png = Url("copy_hover.png");
                                public static readonly string csv_png = Url("csv.png");
                                public static readonly string csv_hover_png = Url("csv_hover.png");
                                public static readonly string pdf_png = Url("pdf.png");
                                public static readonly string pdf_hover_png = Url("pdf_hover.png");
                                public static readonly string print_png = Url("print.png");
                                public static readonly string print_hover_png = Url("print_hover.png");
                                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                                public static class psd {
                                    private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/TableTools/images/psd";
                                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                    public static readonly string collection_psd = Url("collection.psd");
                                    public static readonly string copy_document_psd = Url("copy document.psd");
                                    public static readonly string file_types_psd = Url("file_types.psd");
                                    public static readonly string printer_psd = Url("printer.psd");
                                }
                            
                                public static readonly string xls_png = Url("xls.png");
                                public static readonly string xls_hover_png = Url("xls_hover.png");
                            }
                        
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class js {
                                private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/TableTools/js";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string dataTables_tableTools_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/dataTables.tableTools.min.js") ? Url("dataTables.tableTools.min.js") : Url("dataTables.tableTools.js");
                                public static readonly string dataTables_tableTools_min_js = Url("dataTables.tableTools.min.js");
                            }
                        
                            public static readonly string Readme_md = Url("Readme.md");
                            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                            public static class swf {
                                private const string URLPATH = "~/Content/Admin/plugins/datatables/extensions/TableTools/swf";
                                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                                public static readonly string copy_csv_xls_swf = Url("copy_csv_xls.swf");
                                public static readonly string copy_csv_xls_pdf_swf = Url("copy_csv_xls_pdf.swf");
                            }
                        
                        }
                    
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class images {
                        private const string URLPATH = "~/Content/Admin/plugins/datatables/images";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string sort_asc_png = Url("sort_asc.png");
                        public static readonly string sort_asc_disabled_png = Url("sort_asc_disabled.png");
                        public static readonly string sort_both_png = Url("sort_both.png");
                        public static readonly string sort_desc_png = Url("sort_desc.png");
                        public static readonly string sort_desc_disabled_png = Url("sort_desc_disabled.png");
                    }
                
                    public static readonly string jquery_dataTables_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.dataTables.min.css") ? Url("jquery.dataTables.min.css") : Url("jquery.dataTables.css");
                         
                    public static readonly string jquery_dataTables_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.dataTables.min.js") ? Url("jquery.dataTables.min.js") : Url("jquery.dataTables.js");
                    public static readonly string jquery_dataTables_min_css = Url("jquery.dataTables.min.css");
                    public static readonly string jquery_dataTables_min_js = Url("jquery.dataTables.min.js");
                    public static readonly string jquery_dataTables_themeroller_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.dataTables_themeroller.min.css") ? Url("jquery.dataTables_themeroller.min.css") : Url("jquery.dataTables_themeroller.css");
                         
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class datepicker {
                    private const string URLPATH = "~/Content/Admin/plugins/datepicker";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string bootstrap_datepicker_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.min.js") ? Url("bootstrap-datepicker.min.js") : Url("bootstrap-datepicker.js");
                    public static readonly string datepicker3_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/datepicker3.min.css") ? Url("datepicker3.min.css") : Url("datepicker3.css");
                         
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class locales {
                        private const string URLPATH = "~/Content/Admin/plugins/datepicker/locales";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string bootstrap_datepicker_ar_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.ar.min.js") ? Url("bootstrap-datepicker.ar.min.js") : Url("bootstrap-datepicker.ar.js");
                        public static readonly string bootstrap_datepicker_az_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.az.min.js") ? Url("bootstrap-datepicker.az.min.js") : Url("bootstrap-datepicker.az.js");
                        public static readonly string bootstrap_datepicker_bg_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.bg.min.js") ? Url("bootstrap-datepicker.bg.min.js") : Url("bootstrap-datepicker.bg.js");
                        public static readonly string bootstrap_datepicker_ca_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.ca.min.js") ? Url("bootstrap-datepicker.ca.min.js") : Url("bootstrap-datepicker.ca.js");
                        public static readonly string bootstrap_datepicker_cs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.cs.min.js") ? Url("bootstrap-datepicker.cs.min.js") : Url("bootstrap-datepicker.cs.js");
                        public static readonly string bootstrap_datepicker_cy_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.cy.min.js") ? Url("bootstrap-datepicker.cy.min.js") : Url("bootstrap-datepicker.cy.js");
                        public static readonly string bootstrap_datepicker_da_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.da.min.js") ? Url("bootstrap-datepicker.da.min.js") : Url("bootstrap-datepicker.da.js");
                        public static readonly string bootstrap_datepicker_de_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.de.min.js") ? Url("bootstrap-datepicker.de.min.js") : Url("bootstrap-datepicker.de.js");
                        public static readonly string bootstrap_datepicker_el_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.el.min.js") ? Url("bootstrap-datepicker.el.min.js") : Url("bootstrap-datepicker.el.js");
                        public static readonly string bootstrap_datepicker_es_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.es.min.js") ? Url("bootstrap-datepicker.es.min.js") : Url("bootstrap-datepicker.es.js");
                        public static readonly string bootstrap_datepicker_et_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.et.min.js") ? Url("bootstrap-datepicker.et.min.js") : Url("bootstrap-datepicker.et.js");
                        public static readonly string bootstrap_datepicker_fa_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.fa.min.js") ? Url("bootstrap-datepicker.fa.min.js") : Url("bootstrap-datepicker.fa.js");
                        public static readonly string bootstrap_datepicker_fi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.fi.min.js") ? Url("bootstrap-datepicker.fi.min.js") : Url("bootstrap-datepicker.fi.js");
                        public static readonly string bootstrap_datepicker_fr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.fr.min.js") ? Url("bootstrap-datepicker.fr.min.js") : Url("bootstrap-datepicker.fr.js");
                        public static readonly string bootstrap_datepicker_gl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.gl.min.js") ? Url("bootstrap-datepicker.gl.min.js") : Url("bootstrap-datepicker.gl.js");
                        public static readonly string bootstrap_datepicker_he_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.he.min.js") ? Url("bootstrap-datepicker.he.min.js") : Url("bootstrap-datepicker.he.js");
                        public static readonly string bootstrap_datepicker_hr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.hr.min.js") ? Url("bootstrap-datepicker.hr.min.js") : Url("bootstrap-datepicker.hr.js");
                        public static readonly string bootstrap_datepicker_hu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.hu.min.js") ? Url("bootstrap-datepicker.hu.min.js") : Url("bootstrap-datepicker.hu.js");
                        public static readonly string bootstrap_datepicker_id_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.id.min.js") ? Url("bootstrap-datepicker.id.min.js") : Url("bootstrap-datepicker.id.js");
                        public static readonly string bootstrap_datepicker_is_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.is.min.js") ? Url("bootstrap-datepicker.is.min.js") : Url("bootstrap-datepicker.is.js");
                        public static readonly string bootstrap_datepicker_it_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.it.min.js") ? Url("bootstrap-datepicker.it.min.js") : Url("bootstrap-datepicker.it.js");
                        public static readonly string bootstrap_datepicker_ja_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.ja.min.js") ? Url("bootstrap-datepicker.ja.min.js") : Url("bootstrap-datepicker.ja.js");
                        public static readonly string bootstrap_datepicker_ka_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.ka.min.js") ? Url("bootstrap-datepicker.ka.min.js") : Url("bootstrap-datepicker.ka.js");
                        public static readonly string bootstrap_datepicker_kk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.kk.min.js") ? Url("bootstrap-datepicker.kk.min.js") : Url("bootstrap-datepicker.kk.js");
                        public static readonly string bootstrap_datepicker_kr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.kr.min.js") ? Url("bootstrap-datepicker.kr.min.js") : Url("bootstrap-datepicker.kr.js");
                        public static readonly string bootstrap_datepicker_lt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.lt.min.js") ? Url("bootstrap-datepicker.lt.min.js") : Url("bootstrap-datepicker.lt.js");
                        public static readonly string bootstrap_datepicker_lv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.lv.min.js") ? Url("bootstrap-datepicker.lv.min.js") : Url("bootstrap-datepicker.lv.js");
                        public static readonly string bootstrap_datepicker_mk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.mk.min.js") ? Url("bootstrap-datepicker.mk.min.js") : Url("bootstrap-datepicker.mk.js");
                        public static readonly string bootstrap_datepicker_ms_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.ms.min.js") ? Url("bootstrap-datepicker.ms.min.js") : Url("bootstrap-datepicker.ms.js");
                        public static readonly string bootstrap_datepicker_nb_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.nb.min.js") ? Url("bootstrap-datepicker.nb.min.js") : Url("bootstrap-datepicker.nb.js");
                        public static readonly string bootstrap_datepicker_nl_BE_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.nl-BE.min.js") ? Url("bootstrap-datepicker.nl-BE.min.js") : Url("bootstrap-datepicker.nl-BE.js");
                        public static readonly string bootstrap_datepicker_nl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.nl.min.js") ? Url("bootstrap-datepicker.nl.min.js") : Url("bootstrap-datepicker.nl.js");
                        public static readonly string bootstrap_datepicker_no_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.no.min.js") ? Url("bootstrap-datepicker.no.min.js") : Url("bootstrap-datepicker.no.js");
                        public static readonly string bootstrap_datepicker_pl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.pl.min.js") ? Url("bootstrap-datepicker.pl.min.js") : Url("bootstrap-datepicker.pl.js");
                        public static readonly string bootstrap_datepicker_pt_BR_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.pt-BR.min.js") ? Url("bootstrap-datepicker.pt-BR.min.js") : Url("bootstrap-datepicker.pt-BR.js");
                        public static readonly string bootstrap_datepicker_pt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.pt.min.js") ? Url("bootstrap-datepicker.pt.min.js") : Url("bootstrap-datepicker.pt.js");
                        public static readonly string bootstrap_datepicker_ro_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.ro.min.js") ? Url("bootstrap-datepicker.ro.min.js") : Url("bootstrap-datepicker.ro.js");
                        public static readonly string bootstrap_datepicker_rs_latin_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.rs-latin.min.js") ? Url("bootstrap-datepicker.rs-latin.min.js") : Url("bootstrap-datepicker.rs-latin.js");
                        public static readonly string bootstrap_datepicker_rs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.rs.min.js") ? Url("bootstrap-datepicker.rs.min.js") : Url("bootstrap-datepicker.rs.js");
                        public static readonly string bootstrap_datepicker_ru_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.ru.min.js") ? Url("bootstrap-datepicker.ru.min.js") : Url("bootstrap-datepicker.ru.js");
                        public static readonly string bootstrap_datepicker_sk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.sk.min.js") ? Url("bootstrap-datepicker.sk.min.js") : Url("bootstrap-datepicker.sk.js");
                        public static readonly string bootstrap_datepicker_sl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.sl.min.js") ? Url("bootstrap-datepicker.sl.min.js") : Url("bootstrap-datepicker.sl.js");
                        public static readonly string bootstrap_datepicker_sq_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.sq.min.js") ? Url("bootstrap-datepicker.sq.min.js") : Url("bootstrap-datepicker.sq.js");
                        public static readonly string bootstrap_datepicker_sv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.sv.min.js") ? Url("bootstrap-datepicker.sv.min.js") : Url("bootstrap-datepicker.sv.js");
                        public static readonly string bootstrap_datepicker_sw_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.sw.min.js") ? Url("bootstrap-datepicker.sw.min.js") : Url("bootstrap-datepicker.sw.js");
                        public static readonly string bootstrap_datepicker_th_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.th.min.js") ? Url("bootstrap-datepicker.th.min.js") : Url("bootstrap-datepicker.th.js");
                        public static readonly string bootstrap_datepicker_tr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.tr.min.js") ? Url("bootstrap-datepicker.tr.min.js") : Url("bootstrap-datepicker.tr.js");
                        public static readonly string bootstrap_datepicker_ua_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.ua.min.js") ? Url("bootstrap-datepicker.ua.min.js") : Url("bootstrap-datepicker.ua.js");
                        public static readonly string bootstrap_datepicker_vi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.vi.min.js") ? Url("bootstrap-datepicker.vi.min.js") : Url("bootstrap-datepicker.vi.js");
                        public static readonly string bootstrap_datepicker_zh_CN_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.zh-CN.min.js") ? Url("bootstrap-datepicker.zh-CN.min.js") : Url("bootstrap-datepicker.zh-CN.js");
                        public static readonly string bootstrap_datepicker_zh_TW_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-datepicker.zh-TW.min.js") ? Url("bootstrap-datepicker.zh-TW.min.js") : Url("bootstrap-datepicker.zh-TW.js");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class daterangepicker {
                    private const string URLPATH = "~/Content/Admin/plugins/daterangepicker";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string daterangepicker_bs3_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/daterangepicker-bs3.min.css") ? Url("daterangepicker-bs3.min.css") : Url("daterangepicker-bs3.css");
                         
                    public static readonly string daterangepicker_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/daterangepicker.min.js") ? Url("daterangepicker.min.js") : Url("daterangepicker.js");
                    public static readonly string moment_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/moment.min.js") ? Url("moment.min.js") : Url("moment.js");
                    public static readonly string moment_min_js = Url("moment.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class fastclick {
                    private const string URLPATH = "~/Content/Admin/plugins/fastclick";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string fastclick_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fastclick.min.js") ? Url("fastclick.min.js") : Url("fastclick.js");
                    public static readonly string fastclick_min_js = Url("fastclick.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class flot {
                    private const string URLPATH = "~/Content/Admin/plugins/flot";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string excanvas_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/excanvas.min.js") ? Url("excanvas.min.js") : Url("excanvas.js");
                    public static readonly string excanvas_min_js = Url("excanvas.min.js");
                    public static readonly string jquery_colorhelpers_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.colorhelpers.min.js") ? Url("jquery.colorhelpers.min.js") : Url("jquery.colorhelpers.js");
                    public static readonly string jquery_colorhelpers_min_js = Url("jquery.colorhelpers.min.js");
                    public static readonly string jquery_flot_canvas_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.flot.canvas.min.js") ? Url("jquery.flot.canvas.min.js") : Url("jquery.flot.canvas.js");
                    public static readonly string jquery_flot_canvas_min_js = Url("jquery.flot.canvas.min.js");
                    public static readonly string jquery_flot_categories_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.flot.categories.min.js") ? Url("jquery.flot.categories.min.js") : Url("jquery.flot.categories.js");
                    public static readonly string jquery_flot_categories_min_js = Url("jquery.flot.categories.min.js");
                    public static readonly string jquery_flot_crosshair_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.flot.crosshair.min.js") ? Url("jquery.flot.crosshair.min.js") : Url("jquery.flot.crosshair.js");
                    public static readonly string jquery_flot_crosshair_min_js = Url("jquery.flot.crosshair.min.js");
                    public static readonly string jquery_flot_errorbars_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.flot.errorbars.min.js") ? Url("jquery.flot.errorbars.min.js") : Url("jquery.flot.errorbars.js");
                    public static readonly string jquery_flot_errorbars_min_js = Url("jquery.flot.errorbars.min.js");
                    public static readonly string jquery_flot_fillbetween_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.flot.fillbetween.min.js") ? Url("jquery.flot.fillbetween.min.js") : Url("jquery.flot.fillbetween.js");
                    public static readonly string jquery_flot_fillbetween_min_js = Url("jquery.flot.fillbetween.min.js");
                    public static readonly string jquery_flot_image_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.flot.image.min.js") ? Url("jquery.flot.image.min.js") : Url("jquery.flot.image.js");
                    public static readonly string jquery_flot_image_min_js = Url("jquery.flot.image.min.js");
                    public static readonly string jquery_flot_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.flot.min.js") ? Url("jquery.flot.min.js") : Url("jquery.flot.js");
                    public static readonly string jquery_flot_min_js = Url("jquery.flot.min.js");
                    public static readonly string jquery_flot_navigate_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.flot.navigate.min.js") ? Url("jquery.flot.navigate.min.js") : Url("jquery.flot.navigate.js");
                    public static readonly string jquery_flot_navigate_min_js = Url("jquery.flot.navigate.min.js");
                    public static readonly string jquery_flot_pie_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.flot.pie.min.js") ? Url("jquery.flot.pie.min.js") : Url("jquery.flot.pie.js");
                    public static readonly string jquery_flot_pie_min_js = Url("jquery.flot.pie.min.js");
                    public static readonly string jquery_flot_resize_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.flot.resize.min.js") ? Url("jquery.flot.resize.min.js") : Url("jquery.flot.resize.js");
                    public static readonly string jquery_flot_resize_min_js = Url("jquery.flot.resize.min.js");
                    public static readonly string jquery_flot_selection_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.flot.selection.min.js") ? Url("jquery.flot.selection.min.js") : Url("jquery.flot.selection.js");
                    public static readonly string jquery_flot_selection_min_js = Url("jquery.flot.selection.min.js");
                    public static readonly string jquery_flot_stack_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.flot.stack.min.js") ? Url("jquery.flot.stack.min.js") : Url("jquery.flot.stack.js");
                    public static readonly string jquery_flot_stack_min_js = Url("jquery.flot.stack.min.js");
                    public static readonly string jquery_flot_symbol_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.flot.symbol.min.js") ? Url("jquery.flot.symbol.min.js") : Url("jquery.flot.symbol.js");
                    public static readonly string jquery_flot_symbol_min_js = Url("jquery.flot.symbol.min.js");
                    public static readonly string jquery_flot_threshold_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.flot.threshold.min.js") ? Url("jquery.flot.threshold.min.js") : Url("jquery.flot.threshold.js");
                    public static readonly string jquery_flot_threshold_min_js = Url("jquery.flot.threshold.min.js");
                    public static readonly string jquery_flot_time_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.flot.time.min.js") ? Url("jquery.flot.time.min.js") : Url("jquery.flot.time.js");
                    public static readonly string jquery_flot_time_min_js = Url("jquery.flot.time.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class fullcalendar {
                    private const string URLPATH = "~/Content/Admin/plugins/fullcalendar";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string fullcalendar_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fullcalendar.min.css") ? Url("fullcalendar.min.css") : Url("fullcalendar.css");
                         
                    public static readonly string fullcalendar_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fullcalendar.min.js") ? Url("fullcalendar.min.js") : Url("fullcalendar.js");
                    public static readonly string fullcalendar_min_css = Url("fullcalendar.min.css");
                    public static readonly string fullcalendar_min_js = Url("fullcalendar.min.js");
                    public static readonly string fullcalendar_print_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fullcalendar.print.min.css") ? Url("fullcalendar.print.min.css") : Url("fullcalendar.print.css");
                         
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class iCheck {
                    private const string URLPATH = "~/Content/Admin/plugins/iCheck";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string all_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/all.min.css") ? Url("all.min.css") : Url("all.css");
                         
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class flat {
                        private const string URLPATH = "~/Content/Admin/plugins/iCheck/flat";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string _all_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/_all.min.css") ? Url("_all.min.css") : Url("_all.css");
                             
                        public static readonly string aero_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/aero.min.css") ? Url("aero.min.css") : Url("aero.css");
                             
                        public static readonly string aero_png = Url("aero.png");
                        public static readonly string aero_2x_png = Url("aero@2x.png");
                        public static readonly string blue_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/blue.min.css") ? Url("blue.min.css") : Url("blue.css");
                             
                        public static readonly string blue_png = Url("blue.png");
                        public static readonly string blue_2x_png = Url("blue@2x.png");
                        public static readonly string flat_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/flat.min.css") ? Url("flat.min.css") : Url("flat.css");
                             
                        public static readonly string flat_png = Url("flat.png");
                        public static readonly string flat_2x_png = Url("flat@2x.png");
                        public static readonly string green_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/green.min.css") ? Url("green.min.css") : Url("green.css");
                             
                        public static readonly string green_png = Url("green.png");
                        public static readonly string green_2x_png = Url("green@2x.png");
                        public static readonly string grey_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grey.min.css") ? Url("grey.min.css") : Url("grey.css");
                             
                        public static readonly string grey_png = Url("grey.png");
                        public static readonly string grey_2x_png = Url("grey@2x.png");
                        public static readonly string orange_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/orange.min.css") ? Url("orange.min.css") : Url("orange.css");
                             
                        public static readonly string orange_png = Url("orange.png");
                        public static readonly string orange_2x_png = Url("orange@2x.png");
                        public static readonly string pink_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pink.min.css") ? Url("pink.min.css") : Url("pink.css");
                             
                        public static readonly string pink_png = Url("pink.png");
                        public static readonly string pink_2x_png = Url("pink@2x.png");
                        public static readonly string purple_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/purple.min.css") ? Url("purple.min.css") : Url("purple.css");
                             
                        public static readonly string purple_png = Url("purple.png");
                        public static readonly string purple_2x_png = Url("purple@2x.png");
                        public static readonly string red_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/red.min.css") ? Url("red.min.css") : Url("red.css");
                             
                        public static readonly string red_png = Url("red.png");
                        public static readonly string red_2x_png = Url("red@2x.png");
                        public static readonly string yellow_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/yellow.min.css") ? Url("yellow.min.css") : Url("yellow.css");
                             
                        public static readonly string yellow_png = Url("yellow.png");
                        public static readonly string yellow_2x_png = Url("yellow@2x.png");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class futurico {
                        private const string URLPATH = "~/Content/Admin/plugins/iCheck/futurico";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string futurico_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/futurico.min.css") ? Url("futurico.min.css") : Url("futurico.css");
                             
                        public static readonly string futurico_png = Url("futurico.png");
                        public static readonly string futurico_2x_png = Url("futurico@2x.png");
                    }
                
                    public static readonly string icheck_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/icheck.min.js") ? Url("icheck.min.js") : Url("icheck.js");
                    public static readonly string icheck_min_js = Url("icheck.min.js");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class line {
                        private const string URLPATH = "~/Content/Admin/plugins/iCheck/line";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string _all_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/_all.min.css") ? Url("_all.min.css") : Url("_all.css");
                             
                        public static readonly string aero_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/aero.min.css") ? Url("aero.min.css") : Url("aero.css");
                             
                        public static readonly string blue_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/blue.min.css") ? Url("blue.min.css") : Url("blue.css");
                             
                        public static readonly string green_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/green.min.css") ? Url("green.min.css") : Url("green.css");
                             
                        public static readonly string grey_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grey.min.css") ? Url("grey.min.css") : Url("grey.css");
                             
                        public static readonly string line_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/line.min.css") ? Url("line.min.css") : Url("line.css");
                             
                        public static readonly string line_png = Url("line.png");
                        public static readonly string line_2x_png = Url("line@2x.png");
                        public static readonly string orange_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/orange.min.css") ? Url("orange.min.css") : Url("orange.css");
                             
                        public static readonly string pink_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pink.min.css") ? Url("pink.min.css") : Url("pink.css");
                             
                        public static readonly string purple_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/purple.min.css") ? Url("purple.min.css") : Url("purple.css");
                             
                        public static readonly string red_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/red.min.css") ? Url("red.min.css") : Url("red.css");
                             
                        public static readonly string yellow_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/yellow.min.css") ? Url("yellow.min.css") : Url("yellow.css");
                             
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class minimal {
                        private const string URLPATH = "~/Content/Admin/plugins/iCheck/minimal";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string _all_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/_all.min.css") ? Url("_all.min.css") : Url("_all.css");
                             
                        public static readonly string aero_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/aero.min.css") ? Url("aero.min.css") : Url("aero.css");
                             
                        public static readonly string aero_png = Url("aero.png");
                        public static readonly string aero_2x_png = Url("aero@2x.png");
                        public static readonly string blue_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/blue.min.css") ? Url("blue.min.css") : Url("blue.css");
                             
                        public static readonly string blue_png = Url("blue.png");
                        public static readonly string blue_2x_png = Url("blue@2x.png");
                        public static readonly string green_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/green.min.css") ? Url("green.min.css") : Url("green.css");
                             
                        public static readonly string green_png = Url("green.png");
                        public static readonly string green_2x_png = Url("green@2x.png");
                        public static readonly string grey_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grey.min.css") ? Url("grey.min.css") : Url("grey.css");
                             
                        public static readonly string grey_png = Url("grey.png");
                        public static readonly string grey_2x_png = Url("grey@2x.png");
                        public static readonly string minimal_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/minimal.min.css") ? Url("minimal.min.css") : Url("minimal.css");
                             
                        public static readonly string minimal_png = Url("minimal.png");
                        public static readonly string minimal_2x_png = Url("minimal@2x.png");
                        public static readonly string orange_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/orange.min.css") ? Url("orange.min.css") : Url("orange.css");
                             
                        public static readonly string orange_png = Url("orange.png");
                        public static readonly string orange_2x_png = Url("orange@2x.png");
                        public static readonly string pink_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pink.min.css") ? Url("pink.min.css") : Url("pink.css");
                             
                        public static readonly string pink_png = Url("pink.png");
                        public static readonly string pink_2x_png = Url("pink@2x.png");
                        public static readonly string purple_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/purple.min.css") ? Url("purple.min.css") : Url("purple.css");
                             
                        public static readonly string purple_png = Url("purple.png");
                        public static readonly string purple_2x_png = Url("purple@2x.png");
                        public static readonly string red_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/red.min.css") ? Url("red.min.css") : Url("red.css");
                             
                        public static readonly string red_png = Url("red.png");
                        public static readonly string red_2x_png = Url("red@2x.png");
                        public static readonly string yellow_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/yellow.min.css") ? Url("yellow.min.css") : Url("yellow.css");
                             
                        public static readonly string yellow_png = Url("yellow.png");
                        public static readonly string yellow_2x_png = Url("yellow@2x.png");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class polaris {
                        private const string URLPATH = "~/Content/Admin/plugins/iCheck/polaris";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string polaris_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/polaris.min.css") ? Url("polaris.min.css") : Url("polaris.css");
                             
                        public static readonly string polaris_png = Url("polaris.png");
                        public static readonly string polaris_2x_png = Url("polaris@2x.png");
                    }
                
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class square {
                        private const string URLPATH = "~/Content/Admin/plugins/iCheck/square";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string _all_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/_all.min.css") ? Url("_all.min.css") : Url("_all.css");
                             
                        public static readonly string aero_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/aero.min.css") ? Url("aero.min.css") : Url("aero.css");
                             
                        public static readonly string aero_png = Url("aero.png");
                        public static readonly string aero_2x_png = Url("aero@2x.png");
                        public static readonly string blue_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/blue.min.css") ? Url("blue.min.css") : Url("blue.css");
                             
                        public static readonly string blue_png = Url("blue.png");
                        public static readonly string blue_2x_png = Url("blue@2x.png");
                        public static readonly string green_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/green.min.css") ? Url("green.min.css") : Url("green.css");
                             
                        public static readonly string green_png = Url("green.png");
                        public static readonly string green_2x_png = Url("green@2x.png");
                        public static readonly string grey_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/grey.min.css") ? Url("grey.min.css") : Url("grey.css");
                             
                        public static readonly string grey_png = Url("grey.png");
                        public static readonly string grey_2x_png = Url("grey@2x.png");
                        public static readonly string orange_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/orange.min.css") ? Url("orange.min.css") : Url("orange.css");
                             
                        public static readonly string orange_png = Url("orange.png");
                        public static readonly string orange_2x_png = Url("orange@2x.png");
                        public static readonly string pink_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pink.min.css") ? Url("pink.min.css") : Url("pink.css");
                             
                        public static readonly string pink_png = Url("pink.png");
                        public static readonly string pink_2x_png = Url("pink@2x.png");
                        public static readonly string purple_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/purple.min.css") ? Url("purple.min.css") : Url("purple.css");
                             
                        public static readonly string purple_png = Url("purple.png");
                        public static readonly string purple_2x_png = Url("purple@2x.png");
                        public static readonly string red_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/red.min.css") ? Url("red.min.css") : Url("red.css");
                             
                        public static readonly string red_png = Url("red.png");
                        public static readonly string red_2x_png = Url("red@2x.png");
                        public static readonly string square_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/square.min.css") ? Url("square.min.css") : Url("square.css");
                             
                        public static readonly string square_png = Url("square.png");
                        public static readonly string square_2x_png = Url("square@2x.png");
                        public static readonly string yellow_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/yellow.min.css") ? Url("yellow.min.css") : Url("yellow.css");
                             
                        public static readonly string yellow_png = Url("yellow.png");
                        public static readonly string yellow_2x_png = Url("yellow@2x.png");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class input_mask {
                    private const string URLPATH = "~/Content/Admin/plugins/input-mask";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string jquery_inputmask_date_extensions_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.inputmask.date.extensions.min.js") ? Url("jquery.inputmask.date.extensions.min.js") : Url("jquery.inputmask.date.extensions.js");
                    public static readonly string jquery_inputmask_extensions_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.inputmask.extensions.min.js") ? Url("jquery.inputmask.extensions.min.js") : Url("jquery.inputmask.extensions.js");
                    public static readonly string jquery_inputmask_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.inputmask.min.js") ? Url("jquery.inputmask.min.js") : Url("jquery.inputmask.js");
                    public static readonly string jquery_inputmask_numeric_extensions_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.inputmask.numeric.extensions.min.js") ? Url("jquery.inputmask.numeric.extensions.min.js") : Url("jquery.inputmask.numeric.extensions.js");
                    public static readonly string jquery_inputmask_phone_extensions_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.inputmask.phone.extensions.min.js") ? Url("jquery.inputmask.phone.extensions.min.js") : Url("jquery.inputmask.phone.extensions.js");
                    public static readonly string jquery_inputmask_regex_extensions_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.inputmask.regex.extensions.min.js") ? Url("jquery.inputmask.regex.extensions.min.js") : Url("jquery.inputmask.regex.extensions.js");
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class phone_codes {
                        private const string URLPATH = "~/Content/Admin/plugins/input-mask/phone-codes";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string phone_be_json = Url("phone-be.json");
                        public static readonly string phone_codes_json = Url("phone-codes.json");
                        public static readonly string readme_txt = Url("readme.txt");
                    }
                
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class ionslider {
                    private const string URLPATH = "~/Content/Admin/plugins/ionslider";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class img {
                        private const string URLPATH = "~/Content/Admin/plugins/ionslider/img";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string sprite_skin_flat_png = Url("sprite-skin-flat.png");
                        public static readonly string sprite_skin_nice_png = Url("sprite-skin-nice.png");
                    }
                
                    public static readonly string ion_rangeSlider_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ion.rangeSlider.min.css") ? Url("ion.rangeSlider.min.css") : Url("ion.rangeSlider.css");
                         
                    public static readonly string ion_rangeSlider_min_js = Url("ion.rangeSlider.min.js");
                    public static readonly string ion_rangeSlider_skinFlat_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ion.rangeSlider.skinFlat.min.css") ? Url("ion.rangeSlider.skinFlat.min.css") : Url("ion.rangeSlider.skinFlat.css");
                         
                    public static readonly string ion_rangeSlider_skinNice_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ion.rangeSlider.skinNice.min.css") ? Url("ion.rangeSlider.skinNice.min.css") : Url("ion.rangeSlider.skinNice.css");
                         
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class jQuery {
                    private const string URLPATH = "~/Content/Admin/plugins/jQuery";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string jQuery_2_1_4_min_js = Url("jQuery-2.1.4.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class jQueryUI {
                    private const string URLPATH = "~/Content/Admin/plugins/jQueryUI";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string jquery_ui_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-ui.min.js") ? Url("jquery-ui.min.js") : Url("jquery-ui.js");
                    public static readonly string jquery_ui_min_js = Url("jquery-ui.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class jvectormap {
                    private const string URLPATH = "~/Content/Admin/plugins/jvectormap";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string jquery_jvectormap_1_2_2_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-jvectormap-1.2.2.min.css") ? Url("jquery-jvectormap-1.2.2.min.css") : Url("jquery-jvectormap-1.2.2.css");
                         
                    public static readonly string jquery_jvectormap_1_2_2_min_js = Url("jquery-jvectormap-1.2.2.min.js");
                    public static readonly string jquery_jvectormap_world_mill_en_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-jvectormap-world-mill-en.min.js") ? Url("jquery-jvectormap-world-mill-en.min.js") : Url("jquery-jvectormap-world-mill-en.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class knob {
                    private const string URLPATH = "~/Content/Admin/plugins/knob";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string jquery_knob_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.knob.min.js") ? Url("jquery.knob.min.js") : Url("jquery.knob.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class morris {
                    private const string URLPATH = "~/Content/Admin/plugins/morris";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string morris_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/morris.min.css") ? Url("morris.min.css") : Url("morris.css");
                         
                    public static readonly string morris_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/morris.min.js") ? Url("morris.min.js") : Url("morris.js");
                    public static readonly string morris_min_js = Url("morris.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class pace {
                    private const string URLPATH = "~/Content/Admin/plugins/pace";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string pace_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pace.min.js") ? Url("pace.min.js") : Url("pace.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class select2 {
                    private const string URLPATH = "~/Content/Admin/plugins/select2";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class i18n {
                        private const string URLPATH = "~/Content/Admin/plugins/select2/i18n";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string az_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/az.min.js") ? Url("az.min.js") : Url("az.js");
                        public static readonly string bg_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bg.min.js") ? Url("bg.min.js") : Url("bg.js");
                        public static readonly string ca_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ca.min.js") ? Url("ca.min.js") : Url("ca.js");
                        public static readonly string cs_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/cs.min.js") ? Url("cs.min.js") : Url("cs.js");
                        public static readonly string da_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/da.min.js") ? Url("da.min.js") : Url("da.js");
                        public static readonly string de_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/de.min.js") ? Url("de.min.js") : Url("de.js");
                        public static readonly string en_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/en.min.js") ? Url("en.min.js") : Url("en.js");
                        public static readonly string es_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/es.min.js") ? Url("es.min.js") : Url("es.js");
                        public static readonly string et_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/et.min.js") ? Url("et.min.js") : Url("et.js");
                        public static readonly string eu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/eu.min.js") ? Url("eu.min.js") : Url("eu.js");
                        public static readonly string fa_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fa.min.js") ? Url("fa.min.js") : Url("fa.js");
                        public static readonly string fi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fi.min.js") ? Url("fi.min.js") : Url("fi.js");
                        public static readonly string fr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/fr.min.js") ? Url("fr.min.js") : Url("fr.js");
                        public static readonly string gl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/gl.min.js") ? Url("gl.min.js") : Url("gl.js");
                        public static readonly string he_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/he.min.js") ? Url("he.min.js") : Url("he.js");
                        public static readonly string hi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hi.min.js") ? Url("hi.min.js") : Url("hi.js");
                        public static readonly string hr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hr.min.js") ? Url("hr.min.js") : Url("hr.js");
                        public static readonly string hu_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/hu.min.js") ? Url("hu.min.js") : Url("hu.js");
                        public static readonly string id_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/id.min.js") ? Url("id.min.js") : Url("id.js");
                        public static readonly string is_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/is.min.js") ? Url("is.min.js") : Url("is.js");
                        public static readonly string it_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/it.min.js") ? Url("it.min.js") : Url("it.js");
                        public static readonly string ko_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ko.min.js") ? Url("ko.min.js") : Url("ko.js");
                        public static readonly string lt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lt.min.js") ? Url("lt.min.js") : Url("lt.js");
                        public static readonly string lv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/lv.min.js") ? Url("lv.min.js") : Url("lv.js");
                        public static readonly string mk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/mk.min.js") ? Url("mk.min.js") : Url("mk.js");
                        public static readonly string nb_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nb.min.js") ? Url("nb.min.js") : Url("nb.js");
                        public static readonly string nl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/nl.min.js") ? Url("nl.min.js") : Url("nl.js");
                        public static readonly string pl_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pl.min.js") ? Url("pl.min.js") : Url("pl.js");
                        public static readonly string pt_BR_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pt-BR.min.js") ? Url("pt-BR.min.js") : Url("pt-BR.js");
                        public static readonly string pt_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/pt.min.js") ? Url("pt.min.js") : Url("pt.js");
                        public static readonly string ro_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ro.min.js") ? Url("ro.min.js") : Url("ro.js");
                        public static readonly string ru_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/ru.min.js") ? Url("ru.min.js") : Url("ru.js");
                        public static readonly string sk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sk.min.js") ? Url("sk.min.js") : Url("sk.js");
                        public static readonly string sr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sr.min.js") ? Url("sr.min.js") : Url("sr.js");
                        public static readonly string sv_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/sv.min.js") ? Url("sv.min.js") : Url("sv.js");
                        public static readonly string th_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/th.min.js") ? Url("th.min.js") : Url("th.js");
                        public static readonly string tr_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/tr.min.js") ? Url("tr.min.js") : Url("tr.js");
                        public static readonly string uk_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/uk.min.js") ? Url("uk.min.js") : Url("uk.js");
                        public static readonly string vi_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/vi.min.js") ? Url("vi.min.js") : Url("vi.js");
                        public static readonly string zh_CN_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/zh-CN.min.js") ? Url("zh-CN.min.js") : Url("zh-CN.js");
                        public static readonly string zh_TW_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/zh-TW.min.js") ? Url("zh-TW.min.js") : Url("zh-TW.js");
                    }
                
                    public static readonly string select2_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/select2.min.css") ? Url("select2.min.css") : Url("select2.css");
                         
                    public static readonly string select2_full_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/select2.full.min.js") ? Url("select2.full.min.js") : Url("select2.full.js");
                    public static readonly string select2_full_min_js = Url("select2.full.min.js");
                    public static readonly string select2_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/select2.min.js") ? Url("select2.min.js") : Url("select2.js");
                    public static readonly string select2_min_css = Url("select2.min.css");
                    public static readonly string select2_min_js = Url("select2.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class slimScroll {
                    private const string URLPATH = "~/Content/Admin/plugins/slimScroll";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string jquery_slimscroll_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.slimscroll.min.js") ? Url("jquery.slimscroll.min.js") : Url("jquery.slimscroll.js");
                    public static readonly string jquery_slimscroll_min_js = Url("jquery.slimscroll.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class sparkline {
                    private const string URLPATH = "~/Content/Admin/plugins/sparkline";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string jquery_sparkline_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.sparkline.min.js") ? Url("jquery.sparkline.min.js") : Url("jquery.sparkline.js");
                    public static readonly string jquery_sparkline_min_js = Url("jquery.sparkline.min.js");
                }
            
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class timepicker {
                    private const string URLPATH = "~/Content/Admin/plugins/timepicker";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string bootstrap_timepicker_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-timepicker.min.css") ? Url("bootstrap-timepicker.min.css") : Url("bootstrap-timepicker.css");
                         
                    public static readonly string bootstrap_timepicker_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-timepicker.min.js") ? Url("bootstrap-timepicker.min.js") : Url("bootstrap-timepicker.js");
                    public static readonly string bootstrap_timepicker_min_css = Url("bootstrap-timepicker.min.css");
                    public static readonly string bootstrap_timepicker_min_js = Url("bootstrap-timepicker.min.js");
                }
            
            }
        
        }
    
        public static readonly string AdminSite_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/AdminSite.min.css") ? Url("AdminSite.min.css") : Url("AdminSite.css");
             
        public static readonly string animate_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/animate.min.css") ? Url("animate.min.css") : Url("animate.css");
             
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class bootstrap {
            private const string URLPATH = "~/Content/bootstrap";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string bootstrap_rtl_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-rtl.min.css") ? Url("bootstrap-rtl.min.css") : Url("bootstrap-rtl.css");
                 
            public static readonly string responsive_rtl_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/responsive-rtl.min.css") ? Url("responsive-rtl.min.css") : Url("responsive-rtl.css");
                 
        }
    
        public static readonly string bootstrap_fileupload_min_css = Url("bootstrap-fileupload.min.css");
        public static readonly string bootstrap_rtl_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-rtl.min.css") ? Url("bootstrap-rtl.min.css") : Url("bootstrap-rtl.css");
             
        public static readonly string bootstrap_rtl_min_css = Url("bootstrap-rtl.min.css");
        public static readonly string bootstrap_theme_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-theme.min.css") ? Url("bootstrap-theme.min.css") : Url("bootstrap-theme.css");
             
        public static readonly string bootstrap_theme_min_css = Url("bootstrap-theme.min.css");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class bootstrap_wizard {
            private const string URLPATH = "~/Content/bootstrap-wizard";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string prettify_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/prettify.min.css") ? Url("prettify.min.css") : Url("prettify.css");
                 
            public static readonly string wizard_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/wizard.min.css") ? Url("wizard.min.css") : Url("wizard.css");
                 
        }
    
        public static readonly string bootstrap_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.css") ? Url("bootstrap.min.css") : Url("bootstrap.css");
             
        public static readonly string bootstrap_min_css = Url("bootstrap.min.css");
        public static readonly string carousel_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/carousel.min.css") ? Url("carousel.min.css") : Url("carousel.css");
             
        public static readonly string Common_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Common.min.css") ? Url("Common.min.css") : Url("Common.css");
             
        public static readonly string Docs_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Docs.min.css") ? Url("Docs.min.css") : Url("Docs.css");
             
        public static readonly string ExamInput_mrt = Url("ExamInput.mrt");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class font_awesome {
            private const string URLPATH = "~/Content/font-awesome";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class css {
                private const string URLPATH = "~/Content/font-awesome/css";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string font_awesome_min_css = Url("font-awesome.min.css");
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class fonts {
                    private const string URLPATH = "~/Content/font-awesome/css/fonts";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string fontawesome_webfont_woff = Url("fontawesome-webfont.woff");
                    public static readonly string fontawesome_webfont_2d2816fe_eot = Url("fontawesome-webfont_2d2816fe.eot");
                    public static readonly string fontawesome_webfont_956ab00f_eot = Url("fontawesome-webfont_956ab00f.eot");
                    public static readonly string fontawesome_webfont_956ab00f_svg = Url("fontawesome-webfont_956ab00f.svg");
                    public static readonly string fontawesome_webfont_956ab00f_ttf = Url("fontawesome-webfont_956ab00f.ttf");
                    public static readonly string fontawesome_webfont_956ab00f_woff = Url("fontawesome-webfont_956ab00f.woff");
                }
            
            }
        
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class fonts {
            private const string URLPATH = "~/Content/fonts";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string bkoodak_eot = Url("bkoodak.eot");
            public static readonly string bkoodak_ttf = Url("bkoodak.ttf");
            public static readonly string bkoodak_woff = Url("bkoodak.woff");
            public static readonly string BMitra_eot = Url("BMitra.eot");
            public static readonly string BMitra_ttf = Url("BMitra.ttf");
            public static readonly string BMitra_woff = Url("BMitra.woff");
            public static readonly string BTehran_eot = Url("BTehran.eot");
            public static readonly string BTehran_ttf = Url("BTehran.ttf");
            public static readonly string BTehran_woff = Url("BTehran.woff");
            public static readonly string BYekan_eot = Url("BYekan.eot");
            public static readonly string BYekan_ttf = Url("BYekan.ttf");
            public static readonly string BYekan_woff = Url("BYekan.woff");
            public static readonly string fontawesome_webfont_eot = Url("fontawesome-webfont.eot");
            public static readonly string fontawesome_webfont_svg = Url("fontawesome-webfont.svg");
            public static readonly string fontawesome_webfont_ttf = Url("fontawesome-webfont.ttf");
            public static readonly string fontawesome_webfont_woff = Url("fontawesome-webfont.woff");
            public static readonly string fontawesome_webfontf_eot = Url("fontawesome-webfontf.eot");
            public static readonly string glyphicons_halflings_regular_eot = Url("glyphicons-halflings-regular.eot");
            public static readonly string glyphicons_halflings_regular_svg = Url("glyphicons-halflings-regular.svg");
            public static readonly string glyphicons_halflings_regular_ttf = Url("glyphicons-halflings-regular.ttf");
            public static readonly string glyphicons_halflings_regular_woff = Url("glyphicons-halflings-regular.woff");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class Images {
            private const string URLPATH = "~/Content/Images";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string _1822265663_jpg = Url("1822265663.jpg");
            public static readonly string ads1_gif = Url("ads1.gif");
            public static readonly string ads2_jpg = Url("ads2.jpg");
            public static readonly string Ahvaz_jpg = Url("Ahvaz.jpg");
            public static readonly string alert_png = Url("alert.png");
            public static readonly string avatar_jpg = Url("avatar.jpg");
            public static readonly string bar_png = Url("bar.png");
            public static readonly string bottom_curve_png = Url("bottom-curve.png");
            public static readonly string Calendar_jpg = Url("Calendar.jpg");
            public static readonly string City_png = Url("City.png");
            public static readonly string documents_png = Url("documents.png");
            public static readonly string down_png = Url("down.png");
            public static readonly string download_png = Url("download.png");
            public static readonly string facebook_png = Url("facebook.png");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class fav {
                private const string URLPATH = "~/Content/Images/fav";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string apple_touch_icon_ipad_png = Url("apple-touch-icon-ipad.png");
                public static readonly string apple_touch_icon_ipad3_png = Url("apple-touch-icon-ipad3.png");
                public static readonly string apple_touch_icon_iphone_png = Url("apple-touch-icon-iphone.png");
                public static readonly string apple_touch_icon_iphone4_png = Url("apple-touch-icon-iphone4.png");
                public static readonly string favicon_ico = Url("favicon.ico");
                public static readonly string iefavicon_ico = Url("iefavicon.ico");
            }
        
            public static readonly string glyphicons_halflings_png = Url("glyphicons-halflings.png");
            public static readonly string google_plus_1__png = Url("google_plus(1).png");
            public static readonly string google_plus_png = Url("google_plus.png");
            public static readonly string header_png = Url("header.png");
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class icons {
                private const string URLPATH = "~/Content/Images/icons";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string _88b9j9lc_png = Url("88b9j9lc.png");
                public static readonly string _8w5djnsk_png = Url("8w5djnsk.png");
                public static readonly string down_png = Url("down.png");
                public static readonly string facebook_png = Url("facebook.png");
                public static readonly string fb_icon_jpg = Url("fb-icon.jpg");
                public static readonly string feed_png = Url("feed.png");
                public static readonly string goog_icon_jpg = Url("goog-icon.jpg");
                public static readonly string google_png = Url("google.png");
                public static readonly string jc_vote_gif = Url("jc_vote.gif");
                public static readonly string ldgidclr_png = Url("ldgidclr.png");
                public static readonly string lqmedyej_png = Url("lqmedyej.png");
                public static readonly string RSS_png = Url("RSS.png");
                public static readonly string social_icons_png = Url("social-icons.png");
                public static readonly string twit_icon_jpg = Url("twit-icon.jpg");
                public static readonly string twitter_png = Url("twitter.png");
                public static readonly string up_png = Url("up.png");
                public static readonly string yfxj7ffi_png = Url("yfxj7ffi.png");
                public static readonly string yr3f718a_png = Url("yr3f718a.png");
            }
        
            public static readonly string Insurance_png = Url("Insurance.png");
            public static readonly string like_loading_gif = Url("like-loading.gif");
            public static readonly string loading_gif = Url("loading.gif");
            public static readonly string loading1_gif = Url("loading1.gif");
            public static readonly string loading2_gif = Url("loading2.gif");
            public static readonly string loading4_gif = Url("loading4.gif");
            public static readonly string logo_Ajums_fa_png = Url("logo_Ajums_fa.png");
            public static readonly string messages_png = Url("messages.png");
            public static readonly string minibesmellah__75__jpg = Url("minibesmellah (75).jpg");
            public static readonly string Mony_jpg = Url("Mony.jpg");
            public static readonly string nasty_fabric_png = Url("nasty_fabric.png");
            public static readonly string nav_png = Url("nav.png");
            public static readonly string newbooks_png = Url("newbooks.png");
            public static readonly string paper_jpg = Url("paper.jpg");
            public static readonly string post_png = Url("post.png");
            public static readonly string RSS_icon__1__png = Url("RSS-icon (1).png");
            public static readonly string RSS_icon_png = Url("RSS-icon.png");
            public static readonly string rss_png = Url("rss.png");
            public static readonly string single_post_png = Url("single-post.png");
            public static readonly string slider_png = Url("slider.png");
            public static readonly string subtle_carbon_png = Url("subtle_carbon.png");
            public static readonly string tag_png = Url("tag.png");
            public static readonly string tag_blue__1__png = Url("tag_blue (1).png");
            public static readonly string tag_blue_png = Url("tag_blue.png");
            public static readonly string thumbs_down_png = Url("thumbs-down.png");
            public static readonly string thumbs_up_png = Url("thumbs-up.png");
            public static readonly string top_bar_png = Url("top-bar.png");
            public static readonly string top_curve_png = Url("top-curve.png");
            public static readonly string toprate_png = Url("toprate.png");
            public static readonly string topview_png = Url("topview.png");
            public static readonly string TrandPic_JPG = Url("TrandPic.JPG");
            public static readonly string twitter_png = Url("twitter.png");
            public static readonly string Unit_png = Url("Unit.png");
            public static readonly string user_gif = Url("user.gif");
        }
    
        public static readonly string KRBCSS_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/KRBCSS.min.css") ? Url("KRBCSS.min.css") : Url("KRBCSS.css");
             
        public static readonly string Label_mrt = Url("Label.mrt");
        public static readonly string Logo_png = Url("Logo.png");
        public static readonly string MenuNav_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/MenuNav.min.css") ? Url("MenuNav.min.css") : Url("MenuNav.css");
             
        public static readonly string PagedList_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/PagedList.min.css") ? Url("PagedList.min.css") : Url("PagedList.css");
             
        public static readonly string persianDatepicker_dark_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/persianDatepicker-dark.min.css") ? Url("persianDatepicker-dark.min.css") : Url("persianDatepicker-dark.css");
             
        public static readonly string persianDatepicker_default_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/persianDatepicker-default.min.css") ? Url("persianDatepicker-default.min.css") : Url("persianDatepicker-default.css");
             
        public static readonly string PersianDatePicker_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/PersianDatePicker.min.css") ? Url("PersianDatePicker.min.css") : Url("PersianDatePicker.css");
             
        public static readonly string PersianDatePicker_min_css = Url("PersianDatePicker.min.css");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class redactor {
            private const string URLPATH = "~/Content/redactor";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string redactor_iframe_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/redactor-iframe.min.css") ? Url("redactor-iframe.min.css") : Url("redactor-iframe.css");
                 
            public static readonly string redactor_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/redactor.min.css") ? Url("redactor.min.css") : Url("redactor.css");
                 
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class reports {
            private const string URLPATH = "~/Content/reports";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string fa_xml = Url("fa.xml");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class Select2 {
            private const string URLPATH = "~/Content/Select2";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string select2_spinner_gif = Url("select2-spinner.gif");
            public static readonly string select2_min_css = Url("select2.min.css");
            public static readonly string select2_png = Url("select2.png");
            public static readonly string select2x2_png = Url("select2x2.png");
        }
    
        public static readonly string Site_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/Site.min.css") ? Url("Site.min.css") : Url("Site.css");
             
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class themes {
            private const string URLPATH = "~/Content/themes";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class @base {
                private const string URLPATH = "~/Content/themes/base";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class images {
                    private const string URLPATH = "~/Content/themes/base/images";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string animated_overlay_gif = Url("animated-overlay.gif");
                    public static readonly string htmlandcss_png = Url("htmlandcss.png");
                    public static readonly string ui_bg_flat_0_aaaaaa_40x100_png = Url("ui-bg_flat_0_aaaaaa_40x100.png");
                    public static readonly string ui_bg_flat_75_ffffff_40x100_png = Url("ui-bg_flat_75_ffffff_40x100.png");
                    public static readonly string ui_bg_glass_55_fbf9ee_1x400_png = Url("ui-bg_glass_55_fbf9ee_1x400.png");
                    public static readonly string ui_bg_glass_65_ffffff_1x400_png = Url("ui-bg_glass_65_ffffff_1x400.png");
                    public static readonly string ui_bg_glass_75_dadada_1x400_png = Url("ui-bg_glass_75_dadada_1x400.png");
                    public static readonly string ui_bg_glass_75_e6e6e6_1x400_png = Url("ui-bg_glass_75_e6e6e6_1x400.png");
                    public static readonly string ui_bg_glass_95_fef1ec_1x400_png = Url("ui-bg_glass_95_fef1ec_1x400.png");
                    public static readonly string ui_bg_highlight_soft_75_cccccc_1x100_png = Url("ui-bg_highlight-soft_75_cccccc_1x100.png");
                    public static readonly string ui_icons_222222_256x240_png = Url("ui-icons_222222_256x240.png");
                    public static readonly string ui_icons_2e83ff_256x240_png = Url("ui-icons_2e83ff_256x240.png");
                    public static readonly string ui_icons_454545_256x240_png = Url("ui-icons_454545_256x240.png");
                    public static readonly string ui_icons_888888_256x240_png = Url("ui-icons_888888_256x240.png");
                    public static readonly string ui_icons_cd0a0a_256x240_png = Url("ui-icons_cd0a0a_256x240.png");
                }
            
                public static readonly string jquery_ui_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-ui.min.css") ? Url("jquery-ui.min.css") : Url("jquery-ui.css");
                     
                public static readonly string jquery_ui_accordion_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.accordion.min.css") ? Url("jquery.ui.accordion.min.css") : Url("jquery.ui.accordion.css");
                     
                public static readonly string jquery_ui_all_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.all.min.css") ? Url("jquery.ui.all.min.css") : Url("jquery.ui.all.css");
                     
                public static readonly string jquery_ui_autocomplete_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.autocomplete.min.css") ? Url("jquery.ui.autocomplete.min.css") : Url("jquery.ui.autocomplete.css");
                     
                public static readonly string jquery_ui_base_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.base.min.css") ? Url("jquery.ui.base.min.css") : Url("jquery.ui.base.css");
                     
                public static readonly string jquery_ui_button_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.button.min.css") ? Url("jquery.ui.button.min.css") : Url("jquery.ui.button.css");
                     
                public static readonly string jquery_ui_core_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.core.min.css") ? Url("jquery.ui.core.min.css") : Url("jquery.ui.core.css");
                     
                public static readonly string jquery_ui_datepicker_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.datepicker.min.css") ? Url("jquery.ui.datepicker.min.css") : Url("jquery.ui.datepicker.css");
                     
                public static readonly string jquery_ui_dialog_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.dialog.min.css") ? Url("jquery.ui.dialog.min.css") : Url("jquery.ui.dialog.css");
                     
                public static readonly string jquery_ui_menu_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.menu.min.css") ? Url("jquery.ui.menu.min.css") : Url("jquery.ui.menu.css");
                     
                public static readonly string jquery_ui_progressbar_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.progressbar.min.css") ? Url("jquery.ui.progressbar.min.css") : Url("jquery.ui.progressbar.css");
                     
                public static readonly string jquery_ui_resizable_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.resizable.min.css") ? Url("jquery.ui.resizable.min.css") : Url("jquery.ui.resizable.css");
                     
                public static readonly string jquery_ui_selectable_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.selectable.min.css") ? Url("jquery.ui.selectable.min.css") : Url("jquery.ui.selectable.css");
                     
                public static readonly string jquery_ui_slider_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.slider.min.css") ? Url("jquery.ui.slider.min.css") : Url("jquery.ui.slider.css");
                     
                public static readonly string jquery_ui_spinner_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.spinner.min.css") ? Url("jquery.ui.spinner.min.css") : Url("jquery.ui.spinner.css");
                     
                public static readonly string jquery_ui_tabs_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.tabs.min.css") ? Url("jquery.ui.tabs.min.css") : Url("jquery.ui.tabs.css");
                     
                public static readonly string jquery_ui_theme_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.theme.min.css") ? Url("jquery.ui.theme.min.css") : Url("jquery.ui.theme.css");
                     
                public static readonly string jquery_ui_tooltip_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.tooltip.min.css") ? Url("jquery.ui.tooltip.min.css") : Url("jquery.ui.tooltip.css");
                     
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class minified {
                    private const string URLPATH = "~/Content/themes/base/minified";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class images {
                        private const string URLPATH = "~/Content/themes/base/minified/images";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string animated_overlay_gif = Url("animated-overlay.gif");
                        public static readonly string ui_bg_flat_0_aaaaaa_40x100_png = Url("ui-bg_flat_0_aaaaaa_40x100.png");
                        public static readonly string ui_bg_flat_75_ffffff_40x100_png = Url("ui-bg_flat_75_ffffff_40x100.png");
                        public static readonly string ui_bg_glass_55_fbf9ee_1x400_png = Url("ui-bg_glass_55_fbf9ee_1x400.png");
                        public static readonly string ui_bg_glass_65_ffffff_1x400_png = Url("ui-bg_glass_65_ffffff_1x400.png");
                        public static readonly string ui_bg_glass_75_dadada_1x400_png = Url("ui-bg_glass_75_dadada_1x400.png");
                        public static readonly string ui_bg_glass_75_e6e6e6_1x400_png = Url("ui-bg_glass_75_e6e6e6_1x400.png");
                        public static readonly string ui_bg_glass_95_fef1ec_1x400_png = Url("ui-bg_glass_95_fef1ec_1x400.png");
                        public static readonly string ui_bg_highlight_soft_75_cccccc_1x100_png = Url("ui-bg_highlight-soft_75_cccccc_1x100.png");
                        public static readonly string ui_icons_222222_256x240_png = Url("ui-icons_222222_256x240.png");
                        public static readonly string ui_icons_2e83ff_256x240_png = Url("ui-icons_2e83ff_256x240.png");
                        public static readonly string ui_icons_454545_256x240_png = Url("ui-icons_454545_256x240.png");
                        public static readonly string ui_icons_888888_256x240_png = Url("ui-icons_888888_256x240.png");
                        public static readonly string ui_icons_cd0a0a_256x240_png = Url("ui-icons_cd0a0a_256x240.png");
                    }
                
                    public static readonly string jquery_ui_min_css = Url("jquery-ui.min.css");
                    public static readonly string jquery_ui_accordion_min_css = Url("jquery.ui.accordion.min.css");
                    public static readonly string jquery_ui_autocomplete_min_css = Url("jquery.ui.autocomplete.min.css");
                    public static readonly string jquery_ui_button_min_css = Url("jquery.ui.button.min.css");
                    public static readonly string jquery_ui_core_min_css = Url("jquery.ui.core.min.css");
                    public static readonly string jquery_ui_datepicker_min_css = Url("jquery.ui.datepicker.min.css");
                    public static readonly string jquery_ui_dialog_min_css = Url("jquery.ui.dialog.min.css");
                    public static readonly string jquery_ui_menu_min_css = Url("jquery.ui.menu.min.css");
                    public static readonly string jquery_ui_progressbar_min_css = Url("jquery.ui.progressbar.min.css");
                    public static readonly string jquery_ui_resizable_min_css = Url("jquery.ui.resizable.min.css");
                    public static readonly string jquery_ui_selectable_min_css = Url("jquery.ui.selectable.min.css");
                    public static readonly string jquery_ui_slider_min_css = Url("jquery.ui.slider.min.css");
                    public static readonly string jquery_ui_spinner_min_css = Url("jquery.ui.spinner.min.css");
                    public static readonly string jquery_ui_tabs_min_css = Url("jquery.ui.tabs.min.css");
                    public static readonly string jquery_ui_theme_min_css = Url("jquery.ui.theme.min.css");
                    public static readonly string jquery_ui_tooltip_min_css = Url("jquery.ui.tooltip.min.css");
                }
            
            }
        
            public static readonly string default_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/default.min.css") ? Url("default.min.css") : Url("default.css");
                 
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class start {
                private const string URLPATH = "~/Content/themes/start";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class images {
                    private const string URLPATH = "~/Content/themes/start/images";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    public static readonly string animated_overlay_gif = Url("animated-overlay.gif");
                    public static readonly string ui_anim_basic_16x16_gif = Url("ui-anim_basic_16x16.gif");
                    public static readonly string ui_bg_flat_55_999999_40x100_png = Url("ui-bg_flat_55_999999_40x100.png");
                    public static readonly string ui_bg_flat_75_aaaaaa_40x100_png = Url("ui-bg_flat_75_aaaaaa_40x100.png");
                    public static readonly string ui_bg_glass_45_0078ae_1x400_png = Url("ui-bg_glass_45_0078ae_1x400.png");
                    public static readonly string ui_bg_glass_55_f8da4e_1x400_png = Url("ui-bg_glass_55_f8da4e_1x400.png");
                    public static readonly string ui_bg_glass_75_79c9ec_1x400_png = Url("ui-bg_glass_75_79c9ec_1x400.png");
                    public static readonly string ui_bg_gloss_wave_45_e14f1c_500x100_png = Url("ui-bg_gloss-wave_45_e14f1c_500x100.png");
                    public static readonly string ui_bg_gloss_wave_50_6eac2c_500x100_png = Url("ui-bg_gloss-wave_50_6eac2c_500x100.png");
                    public static readonly string ui_bg_gloss_wave_75_2191c0_500x100_png = Url("ui-bg_gloss-wave_75_2191c0_500x100.png");
                    public static readonly string ui_bg_inset_hard_100_fcfdfd_1x100_png = Url("ui-bg_inset-hard_100_fcfdfd_1x100.png");
                    public static readonly string ui_icons_0078ae_256x240_png = Url("ui-icons_0078ae_256x240.png");
                    public static readonly string ui_icons_056b93_256x240_png = Url("ui-icons_056b93_256x240.png");
                    public static readonly string ui_icons_d8e7f3_256x240_png = Url("ui-icons_d8e7f3_256x240.png");
                    public static readonly string ui_icons_e0fdff_256x240_png = Url("ui-icons_e0fdff_256x240.png");
                    public static readonly string ui_icons_f5e175_256x240_png = Url("ui-icons_f5e175_256x240.png");
                    public static readonly string ui_icons_f7a50d_256x240_png = Url("ui-icons_f7a50d_256x240.png");
                    public static readonly string ui_icons_fcd113_256x240_png = Url("ui-icons_fcd113_256x240.png");
                }
            
                public static readonly string jquery_ui_1_10_2_autocomplete_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-ui-1.10.2.autocomplete.min.css") ? Url("jquery-ui-1.10.2.autocomplete.min.css") : Url("jquery-ui-1.10.2.autocomplete.css");
                     
                public static readonly string jquery_ui_1_10_2_autocomplete_min_css = Url("jquery-ui-1.10.2.autocomplete.min.css");
                public static readonly string jquery_ui_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-ui.min.css") ? Url("jquery-ui.min.css") : Url("jquery-ui.css");
                     
                public static readonly string jquery_ui_accordion_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.accordion.min.css") ? Url("jquery.ui.accordion.min.css") : Url("jquery.ui.accordion.css");
                     
                public static readonly string jquery_ui_all_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.all.min.css") ? Url("jquery.ui.all.min.css") : Url("jquery.ui.all.css");
                     
                public static readonly string jquery_ui_autocomplete_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.autocomplete.min.css") ? Url("jquery.ui.autocomplete.min.css") : Url("jquery.ui.autocomplete.css");
                     
                public static readonly string jquery_ui_base_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.base.min.css") ? Url("jquery.ui.base.min.css") : Url("jquery.ui.base.css");
                     
                public static readonly string jquery_ui_button_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.button.min.css") ? Url("jquery.ui.button.min.css") : Url("jquery.ui.button.css");
                     
                public static readonly string jquery_ui_core_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.core.min.css") ? Url("jquery.ui.core.min.css") : Url("jquery.ui.core.css");
                     
                public static readonly string jquery_ui_datepicker_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.datepicker.min.css") ? Url("jquery.ui.datepicker.min.css") : Url("jquery.ui.datepicker.css");
                     
                public static readonly string jquery_ui_dialog_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.dialog.min.css") ? Url("jquery.ui.dialog.min.css") : Url("jquery.ui.dialog.css");
                     
                public static readonly string jquery_ui_menu_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.menu.min.css") ? Url("jquery.ui.menu.min.css") : Url("jquery.ui.menu.css");
                     
                public static readonly string jquery_ui_progressbar_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.progressbar.min.css") ? Url("jquery.ui.progressbar.min.css") : Url("jquery.ui.progressbar.css");
                     
                public static readonly string jquery_ui_resizable_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.resizable.min.css") ? Url("jquery.ui.resizable.min.css") : Url("jquery.ui.resizable.css");
                     
                public static readonly string jquery_ui_selectable_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.selectable.min.css") ? Url("jquery.ui.selectable.min.css") : Url("jquery.ui.selectable.css");
                     
                public static readonly string jquery_ui_slider_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.slider.min.css") ? Url("jquery.ui.slider.min.css") : Url("jquery.ui.slider.css");
                     
                public static readonly string jquery_ui_spinner_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.spinner.min.css") ? Url("jquery.ui.spinner.min.css") : Url("jquery.ui.spinner.css");
                     
                public static readonly string jquery_ui_tabs_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.tabs.min.css") ? Url("jquery.ui.tabs.min.css") : Url("jquery.ui.tabs.css");
                     
                public static readonly string jquery_ui_theme_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.theme.min.css") ? Url("jquery.ui.theme.min.css") : Url("jquery.ui.theme.css");
                     
                public static readonly string jquery_ui_tooltip_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.ui.tooltip.min.css") ? Url("jquery.ui.tooltip.min.css") : Url("jquery.ui.tooltip.css");
                     
                [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                public static class minified {
                    private const string URLPATH = "~/Content/themes/start/minified";
                    public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                    public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
                    public static class images {
                        private const string URLPATH = "~/Content/themes/start/minified/images";
                        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                        public static readonly string animated_overlay_gif = Url("animated-overlay.gif");
                        public static readonly string ui_bg_flat_55_999999_40x100_png = Url("ui-bg_flat_55_999999_40x100.png");
                        public static readonly string ui_bg_flat_75_aaaaaa_40x100_png = Url("ui-bg_flat_75_aaaaaa_40x100.png");
                        public static readonly string ui_bg_glass_45_0078ae_1x400_png = Url("ui-bg_glass_45_0078ae_1x400.png");
                        public static readonly string ui_bg_glass_55_f8da4e_1x400_png = Url("ui-bg_glass_55_f8da4e_1x400.png");
                        public static readonly string ui_bg_glass_75_79c9ec_1x400_png = Url("ui-bg_glass_75_79c9ec_1x400.png");
                        public static readonly string ui_bg_gloss_wave_45_e14f1c_500x100_png = Url("ui-bg_gloss-wave_45_e14f1c_500x100.png");
                        public static readonly string ui_bg_gloss_wave_50_6eac2c_500x100_png = Url("ui-bg_gloss-wave_50_6eac2c_500x100.png");
                        public static readonly string ui_bg_gloss_wave_75_2191c0_500x100_png = Url("ui-bg_gloss-wave_75_2191c0_500x100.png");
                        public static readonly string ui_bg_inset_hard_100_fcfdfd_1x100_png = Url("ui-bg_inset-hard_100_fcfdfd_1x100.png");
                        public static readonly string ui_icons_0078ae_256x240_png = Url("ui-icons_0078ae_256x240.png");
                        public static readonly string ui_icons_056b93_256x240_png = Url("ui-icons_056b93_256x240.png");
                        public static readonly string ui_icons_d8e7f3_256x240_png = Url("ui-icons_d8e7f3_256x240.png");
                        public static readonly string ui_icons_e0fdff_256x240_png = Url("ui-icons_e0fdff_256x240.png");
                        public static readonly string ui_icons_f5e175_256x240_png = Url("ui-icons_f5e175_256x240.png");
                        public static readonly string ui_icons_f7a50d_256x240_png = Url("ui-icons_f7a50d_256x240.png");
                        public static readonly string ui_icons_fcd113_256x240_png = Url("ui-icons_fcd113_256x240.png");
                    }
                
                    public static readonly string jquery_ui_min_css = Url("jquery-ui.min.css");
                    public static readonly string jquery_ui_accordion_min_css = Url("jquery.ui.accordion.min.css");
                    public static readonly string jquery_ui_autocomplete_min_css = Url("jquery.ui.autocomplete.min.css");
                    public static readonly string jquery_ui_button_min_css = Url("jquery.ui.button.min.css");
                    public static readonly string jquery_ui_core_min_css = Url("jquery.ui.core.min.css");
                    public static readonly string jquery_ui_datepicker_min_css = Url("jquery.ui.datepicker.min.css");
                    public static readonly string jquery_ui_dialog_min_css = Url("jquery.ui.dialog.min.css");
                    public static readonly string jquery_ui_menu_min_css = Url("jquery.ui.menu.min.css");
                    public static readonly string jquery_ui_progressbar_min_css = Url("jquery.ui.progressbar.min.css");
                    public static readonly string jquery_ui_resizable_min_css = Url("jquery.ui.resizable.min.css");
                    public static readonly string jquery_ui_selectable_min_css = Url("jquery.ui.selectable.min.css");
                    public static readonly string jquery_ui_slider_min_css = Url("jquery.ui.slider.min.css");
                    public static readonly string jquery_ui_spinner_min_css = Url("jquery.ui.spinner.min.css");
                    public static readonly string jquery_ui_tabs_min_css = Url("jquery.ui.tabs.min.css");
                    public static readonly string jquery_ui_theme_min_css = Url("jquery.ui.theme.min.css");
                    public static readonly string jquery_ui_tooltip_min_css = Url("jquery.ui.tooltip.min.css");
                }
            
            }
        
        }
    
        public static readonly string toastr_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/toastr.min.css") ? Url("toastr.min.css") : Url("toastr.css");
             
        public static readonly string toastr_less = Url("toastr.less");
        public static readonly string toastr_min_css = Url("toastr.min.css");
        public static readonly string toastr_scss = Url("toastr.scss");
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class uniform {
            private const string URLPATH = "~/Content/uniform";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class css {
                private const string URLPATH = "~/Content/uniform/css";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string uniform_default_min_css = Url("uniform.default.min.css");
            }
        
            [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
            public static class images {
                private const string URLPATH = "~/Content/uniform/images";
                public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
                public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
                public static readonly string bg_input_focus_png = Url("bg-input-focus.png");
                public static readonly string bg_input_png = Url("bg-input.png");
                public static readonly string sprite_png = Url("sprite.png");
            }
        
        }
    
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static partial class Bundles
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class Scripts {}
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class Styles {}
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
internal static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    private static string ProcessVirtualPathDefault(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }

    // Calling ProcessVirtualPath through delegate to allow it to be replaced for unit testing
    public static Func<string, string> ProcessVirtualPath = ProcessVirtualPathDefault;

    // Calling T4Extension.TimestampString through delegate to allow it to be replaced for unit testing and other purposes
    public static Func<string, string> TimestampString = System.Web.Mvc.T4Extensions.TimestampString;

    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}





#endregion T4MVC
#pragma warning restore 1591, 3008, 3009, 0108


